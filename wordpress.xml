<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0" created="2013-01-27 15:27"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Spockwang&#039;s Blog</title>
	<link>http://spockwang.blogcn.com</link>
	<description>Stay foolish! Stay hungary!</description>
	<pubDate>Sun, 25 Nov 2012 11:22:28 +0000</pubDate>
	<generator>http://wordpress.org/?v=3.0</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://spockwang.blogcn.com</wp:base_site_url>
	<wp:base_blog_url>http://spockwang.blogcn.com</wp:base_blog_url>
		<wp:category><wp:category_nicename>administration</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Administration]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>network</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Network]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Programming]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%9c%aa%e5%88%86%e7%b1%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>%e5%90%8d%e8%a8%80%e8%ad%a6%e5%8f%a5</wp:tag_slug><wp:tag_name><![CDATA[名言警句]]></wp:tag_name></wp:tag>
			<wp:term><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>bottom-navigation</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[Bottom Navigation]]></wp:term_name></wp:term>
		<wp:term><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>header</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[Header]]></wp:term_name></wp:term>
		<wp:term><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>top-navigation</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[Top Navigation]]></wp:term_name></wp:term>
	
	<generator>http://wordpress.org/?v=3.0</generator>

		<item>
		<title>自动草稿</title>
		<link>http://spockwang.blogcn.com/?p=47</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2012-11-25 18:41:44</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>关于</title>
		<link>http://spockwang.blogcn.com/about</link>
		<pubDate>Sat, 20 Aug 2011 14:44:54 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<guid isPermaLink="false">http://spockwang.blogcn.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[这是关于软件开发和编程技术的博客。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2011-08-20 22:44:54</wp:post_date>
		<wp:post_date_gmt>2011-08-20 14:44:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1313992071]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Linux程序的加载、运行和终止</title>
		<link>http://spockwang.blogcn.com/articles/linux%e7%a8%8b%e5%ba%8f%e7%9a%84%e5%8a%a0%e8%bd%bd%e3%80%81%e8%bf%90%e8%a1%8c%e5%92%8c%e7%bb%88%e6%ad%a2.html</link>
		<pubDate>Sat, 20 Aug 2011 14:58:42 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>简介</h2>
用户在编写程序时都要定义一个<tt>main()</tt>函数作为程序运行的入口。程序开始执行时就从这个函数开始。当这个函数返回时就表明程序运行结束了。可是用户编写的程序要能正确运行远不是这么简单。比如，我们不禁要问<tt>main()</tt>是由谁调用的呢？当从<tt>main()</tt>返回后又运行到哪里去了呢？C++程序中定义的全局对象是如何构造的呢？又是如何析构的呢？如果程序是动态链接的，它所依赖的共享库是如何加载进内存的？更复杂的是，共享对象中的全局对象是如何构造的和析构的呢？要回答这些问题，就不得不弄清程序加载、运行和终止的整个流程，从中也可以知道系统软件（包括操作系统、动态链接器、链接编辑器和编译器）为了支持用户程序的正确运行做了多么复杂的工作。

为了支持用户程序的正确运行需要解决以下几个重要问题：
<ul>
	<li> 加载用户程序以及它所依赖的所有共享对象；</li>
	<li> 对用户程序和共享对象进行<strong>符号解析</strong>和<strong>重定位</strong>；</li>
	<li> 向用户程序传递环境变量和命令行参数。</li>
	<li> 根据C++标准的规定，全局对象（包括用户程序和共享库中定义的）必须  在<tt>main()</tt>执行前初始化，并在程序结束时以相反的顺序析构。</li>
</ul>
为了理清这些问题，下面我们来分析Linux系统下程序的运行流程。
<h2>术语</h2>
<dl> <dt> 程序头(Program Header) </dt> <dd> 程序头在[gabi]的<q>Program Header</q>一节中定义，是ELF文件执行视图的重  要部分。它规定了ELF文件中的哪些部分段需要加载以及加载的地址以及是否需要动  态链接器等信息。若需要动态链接器，程序头中的<tt>PT_INTERP</tt>指定了动态  链接器的路径 </dd> <dt> 初始化代码和终止代码(Initialization and Termination code) </dt> <dd> 每个可执行文件和共享对象都有初始化代码和终止代码。初始化代码在用户程  序开始执行前执行。所有的共享对象的初始化代码在可执行文件获得控制权之前执  行。终止代码则在进程退出时执行，顺序与初始化代码执行的顺序相反。共享对象  的初始化代码和终止代码由动态连接器负责执行。(<q>Initialization and  Termination Functions</q>, [gabi]) </dd> <dt> 加载时重定位（Load-time Relocation）和运行时重定位（Run-time Relocation） </dt> <dd> 加载时重定位指在动态链接器加载对象文件后就进行的重定位，而运行时重定位  是指在用户程序已开始运行后在需要的情况下进行的重定位。PLT表的重定位就属于  运行时重定位。在PLT表的帮助下，当第一次调用一个函数时进行重定位，以后再调  用时就不用重定位了。若这个函数不被调用则不需要重定位，这可省去加载时重定  位的时间。详见[abi386-4]的<q>Procedure Linkage Table</q>一节。 </dd> </dl>
<h2>程序运行的基本流程</h2>
首先给出一个大致的流程。
<ol>
	<li> 操作系统运行用户程序时将其映射到内存中；</li>
	<li> 当它看到可执行文件中的<tt>PT_INERP</tt>时，操作系统  将<tt>PT_INTERP</tt>指定的动态链接器映射进内存，并通过栈向其传递它所需要  的参数，并跳到动态链接器的入口处开始执行；</li>
	<li> 动态链接器开始自举（Bootstrap），对自己进行重定位，并开始构造符号  表；</li>
	<li> 自举完成后，动态链接器根据可执行文件.dynamic段中的DT_NEEDED元素开始加  载依赖的共享对象，并加入它的符号表。如果这个共享对象依赖其它的共享对象，  动态链接器也会加载它们。当这个过程结束时，所有需要的共享对象都已加载进内  存，动态链接器也具有了程序和所有共享库的符号表。</li>
	<li> 这时，动态链接器重新遍历共享库，并进行加载时重定位（注意加载时重定位  采用依赖图的后序遍历顺序进行。也就是说如果A对象依赖B对象，则先处理B对象再  处理A对象）。加载时重定位包括：
<ul>
	<li> 对数据的引用，在<tt>.rel.dyn</tt>段中，需要初始化一个      GOT（在<tt>.got</tt>中）项为一个      全局符号的地址；</li>
	<li> 对代码的引用（在<tt>.rel.plt</tt>段中），需要初始化一个      GOT（在<tt>.got.plt</tt>)项为PLT表中第二条指令的地址（<q>Procedure      Linkage Table</q>, [abi386-4]）。</li>
</ul>
如果共享对象有初始化代码（在<tt>.init</tt>中，全局对象的初始化就是这样实    现的），动态链接器会执行它，并将终止代码（在<tt>.fini</tt>中，全局对象的    析构就是这样实现的）记录下来以便退出时执行。动态链接器不会执行用户程序的    初始化代码，它由用户程序的启动代码自己执行。这个过程完成后，所有的共享对    象都已重定位并初始化，动态链接器跳到用户程序的入口处开始执行。注意，为了    能在程序退出时让动态链接器有机会调用共享对象的终止代码，动态链接器会传递    一个终止函数（用以调用共享对象的终止代码）给用户程序。</li>
	<li> 用户程序开始执行。首先它注册动态链接器的终止函数和它自己的终止函数，    然后调用用户程序的初始化代码，然后调用用户定义的<tt>main()</tt>函数。    <tt>main()</tt>函数返回后，以注册的相反顺序调用终止函数（也就是说先调用    用户程序的终止函数，再调用动态链接器的终止函数），最后调    用<tt>_exit()</tt>退出进程。</li>
</ol>
详见[Levine]第10章。

下面结合实际代码给出Linux下详细的运行流程。
<h3>程序的加载</h3>
程序的加载是通过执行<tt>exec(3)</tt>系统调用实现的。当在命令行上执行一个程序或在图形界面系统中双击一个可执行文件时最终都是通过这个系统调用来执行程序的。执行这个系统调用后，陷入操作系统内核，由操作系统负责加载该程序文件。在操作系统确认相关参数后，然后通过内存映射方式加载进内存。若该ELF文件是动态链接的可执行文件（程序头中存在<tt>PT_INTERP</tt>）需要动态连接器的支持，操作系统则将该动态连接器映射进内存，并准备好相应的环境，将控制权转移给动态连接器。若ELF文件是静态链接的，则操作系统准备好环境后直接转移到ELF文件的入口点开始执行。详细过程如下：
<ol>
	<li> 执行<tt>exec(3)</tt>调用后陷入操作系统内核，检查参数，并判断可执行文件  的类型。因为Linux支持的可执行文件不止一种类型，加载不同类型的文件方法不一  样。下面假设文件类型为ELF。</li>
	<li> 检查ELF文件格式的有效性，读入程序头（Program Header），并检查是否存在    <tt>PT_INTERP</tt>项。存在的话说明该文件是动态链接的可执行文件，需要动态  连接器的支持。</li>
	<li> 根据ELF文件程序头的信息对ELF文件进行映射，通常包括两个段：代码段和数  据段。</li>
	<li> 初始化进程运行的堆栈环境，在栈中存储环境变量、命令行参数以及需要传给  动态连接器的一些附加参数（Auxiliary Vector）。（见[abi386-4]的图3-31）</li>
	<li> 若ELF文件是静态链接的可执行文件，跳转到用户程序入口点（由其程序头定义）开始  执行；若ELF文件是动态链接的可执行文件，映射动态连接器，并跳转到动态连接器  的入口处开始执行。</li>
</ol>
另见[abi386-4]的第5节，[gabi]的<q>Dynamic Linking</q>.
<h3>运行动态连接器</h3>
对于动态链接的可执行文件，还需要动态连接器为其加载可执行文件依赖的共享对象文件并进行符号重定位才可以执行。动态连接器的位置存储在可执行文件程序头的<tt>PT_INTERP</tt>元素中（见[gabi]<q>Program Header</q>一节）。动态连接器的运行过程如下：
<ol>
	<li> 动态连接器的入口是<tt>_start</tt>，  在<tt>glibc/sysdeps/i386/dl-machine.h</tt>中的<tt>RTLD_START</tt>宏中定义。它首先调  用<tt>_dl_start() (glibc/elf/rtld.c)</tt>。</li>
	<li> <tt>_dl_start()</tt>首先对动态连接器自己进行重定位，最后调  用<tt>_dl_start_final() (glibc/elf/rtld.c)</tt>收集一些基本的运行时信息后  调用<tt>_dl_sysdep_start() (glibc/elf/dl-sysdep.c)</tt>。</li>
	<li> <tt>_dl_sysdep_start()</tt>首先处理由操作系统建立的环境信息（Figure  3-31, p.28, [abi386-4]），设置相关参数(<tt>_dl_argc:</tt> 命令行参数的个  数，<tt>_dl_argv:</tt> 命令行参数数组，<tt>_environ:</tt> 环境数  组，<tt>_dl_auxv:</tt> 传递给动态连接器的附加参数数组)，在读  入<tt>_dl_auxv</tt>数组存储的信息，最后调  用<tt>_dl_main() (glibc/elf/rtld.c)</tt>进行动态连接器的主要任务。</li>
	<li> <tt>_dl_main()</tt>非常长，主要工作是加载可执行文件依赖的所有共享对  象，构造符号表，并进行<strong>加载时重定位</strong>（有些重定位可以延迟到需要时再进行，称为    <strong>运行时重定位</strong>）。考虑到<tt>R_386_COPY</tt>（见[abi386-4]的78页）重定位类  型，要特别加载时重定位的顺序。下面是摘自<tt>_dl_main()</tt>中的一段注释。
<blockquote style="font-size: 1em; font-family: monospace;">/* Now we have all the objects loaded.  Relocate them all except for  the dynamic linker itself.  We do this in reverse order so that copy  relocs of earlier objects overwrite the data written by later  objects.  We do not re-relocate the dynamic linker itself in this  loop because that could result in the GOT entries for functions we  call being changed, and that would break us.  It is safe to relocate  the dynamic linker out of order because it has no copy relocs (we  know that because it is self-contained).  */</blockquote>
简单地说，先重定位一个对象文件所依赖的所有对象文件再重定位这个对象文件。    重定位完成后返回到<tt>_dl_sysdep_start()</tt>，然后返回    到<tt>_dl_start_final()</tt>，然后再返回到<tt>_dl_start()</tt>，继续返回    到<tt>_start</tt>。</li>
	<li> <tt>_start</tt>调用动态连接器的初始化函数（以调用每个共享对象的初始化  代码），并把动态连接器的终止函数（以调用每个共享对象的终止代码）地址存  入<tt>EDX</tt>寄存器以传给可执行文件，然后跳转到可执行文件的入口处开始执行。</li>
</ol>
动态连接器任务完成后将控制权转移给用户程序，此时用户程序才正是开始执行。
<h3>用户程序的执行</h3>
不管用户程序是静态的还是动态的可执行文件，它们的入口处都在<tt>_start (glibc/sysdeps/i386/elf/Start.S)</tt>。它首先设置好一些寄存器后调用<tt>__libc_start_main() (glibc/csu/libc-start.c)</tt>。<tt>__libc_start_main()</tt>主要进行以下工作:
<ol>
	<li> 调用<tt>__cxa_atexit() (glibc/stdlib/cxa_atexit.c)</tt>注册动态连接器通过<tt>EDX</tt>寄存器传过来的终  止函数。</li>
	<li> 调用<tt>__cxa_atexit()</tt>注册用户程序的终止函数</li>
	<li> 调用用户程序的初始化函数</li>
	<li> 调用用户提供的<tt>main()</tt>函数</li>
	<li> <tt>main()</tt>返回后调用<tt>exit() (glibc/stdlib/exit.c)</tt>。<tt>exit()</tt>以注册的相反    顺序调用<tt>atexit() (glibc/stdlib/atexit.c)</tt>和<tt>__cxa_atexit()</tt>注册的函数，然后调    用<tt>_exit()</tt>结束进程。</li>
</ol>
<h2>参考文献</h2>
<ul>
	<li> [abi386-4] <em>System V Application Binary Interface: Intel386  Architecture Processor Supplement,</em> Fourth Edition.</li>
	<li> [gabi4] <em>System V Application Binary Interface</em>, 2001.</li>
	<li> [Levine] John R. Levine, <em><a href="http://www.iecc.com/linker/">Linkers and Loaders</a></em>.</li>
	<li> <a href="http://ftp.gnu.org/gnu/glibc/">Glibc源代码</a>。</li>
</ul>
<hr /><em>Updated: 2011-03-06 22:04:53</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2011-08-20 22:58:42</wp:post_date>
		<wp:post_date_gmt>2011-08-20 14:58:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux%e7%a8%8b%e5%ba%8f%e7%9a%84%e5%8a%a0%e8%bd%bd%e3%80%81%e8%bf%90%e8%a1%8c%e5%92%8c%e7%bb%88%e6%ad%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1313852323]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Symbol resolution by GNU ld</title>
		<link>http://spockwang.blogcn.com/articles/symbol-resolution-by-gnu-ld.html</link>
		<pubDate>Sat, 20 Aug 2011 15:48:25 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Symbol Resolution</h2>
When a symbol appeared multiple times in object files being combined asymbole resolution process is called by the link editor to determine whichsymbol is taken. The resolution of two symbols with the same namedepends on the symbol's attributes (its binding, defineness and size). Seepage 67 of [<a href="#gabi41">Gabi4</a>].

<dl> <dt> Global </dt> <dd>Global symbols are those whose binding is <code>STB_GLOBAL</code>. They are visible to all object files being combined. </dd> <dt> Weak </dt> <dd> Weak symbols are binding is <tt>STB_WEAK</tt>. They resemble global symbols, but their definitions have lower precedence. It can be further categorized into two kinds: undefined weak symbols and defined weak symbols. </dd> <dt> Common </dt> <dd> Common symbols are those whose section index is <tt>STN_COMMON</tt>. They are defined but have not been allocated. Its final size are not determined until the symbol resolution process is complete. </dd> <dt> Undefined </dt> <dd> Undefined symbols are those whose section index is <tt>STN_UNDEF</tt>. </dd> </dl>The rules for symbol resolution is as follows.
<ol>
	<li> If a global symbol exists it can only appeared once in object files being combined. Multipe definitions of global symbols with the same name will cause an error. On the other hand, if a definition of a global symbol eixists, the appearence of weak symbols and/or common symbols with the same name will not cause an error. The link editor honors the global definition and ignores the weak and/or common ones.</li>
	<li> Otherwise, if a common symbol exists, the appearence of weak symbols with the same name will not cause an error. The link editor honors the common definition and ignores the weak ones. If muliple common symbols with the same name exists, the link editor honors the common definition with the biggest size.</li>
	<li> Otherwise, multiple appearences of weak symbols with the same name do not cause an error.
<ol>
	<li> If some of the weak symbols are defined (the section index is a positive integer), the link editor will honor the first found defined symbol and inogre the others.</li>
	<li> Otherwise, if all the weak symbols are undefined, the symbol will be left as an undefined weak symbol in the output file no matter what type of output file is being generated. In addition, if a executable is being generated, all the reference to the symbol will be assigned a value of zero. In the case of dynamic shared object, during process execution, the dynamic linker searches for this symbol. If the dynamic linker does not find a match, it binds a reference to a address of zero instead of generating a fatal runtime relocation error.</li>
</ol>
</li>
</ol>
<h2>Testing Existence of Functionality</h2>
Undefined weak refenrenced symbols may provide a useful mechanism fortesting the existence of functionality. For example, the following C codefragment might have been used in the shared object<tt>libfoo.so.1</tt>:
<pre class="borderindent">#pragma weak foo

extern void foo(char *);

void bar(char *path)
{
    void (*fptr)(char *);
    if ((fptr = foo) != 0)
        (*fptr)(path);
}</pre>
When application is built against <tt>libfoo.so.1</tt>, the link editor willcomplete successfully regardless of whether a definition for the symbol<tt>foo</tt> is found. If during execution of the application the functionaddress tests nonzero, the function is called. However, if the symboldeﬁnition is not found, the function address tests zero and so it is notcalled. See page 45 of [<a href="symbols.html#sun04">Sun04</a>].
<h2>Refenrences</h2>
<ul>
	<li> <a name="gabi4"></a><a href="http://www.sco.com/developers/devspecs/gabi41.pdf">System V ABI Edition 4.1, 1997</a>.</li>
	<li> <a name="sun04"></a>Sun Microsystems, Inc. <a href="http://download.oracle.com/docs/cd/E19683-01/817-3677/817-3677.pdf"><em>Linker and Libraries Guide</em></a>, 2004.</li>
</ul>
<hr /><em>Updated: 2011-03-04 16:14</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2011-08-20 23:48:25</wp:post_date>
		<wp:post_date_gmt>2011-08-20 15:48:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>symbol-resolution-by-gnu-ld</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328193063]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Hello world!</title>
		<link>http://spockwang.blogcn.com/articles/hello-world.html</link>
		<pubDate>Sat, 20 Aug 2011 22:44:54 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[欢迎使用 WordPress。这是您的第一篇日志。您可以编辑它或是删除它，然后开始写您自己的博客。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2011-08-20 22:44:54</wp:post_date>
		<wp:post_date_gmt>2011-08-20 22:44:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
		<wp:meta_value><![CDATA[1313856922]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_trash_meta_comments_status</wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:1;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>1</wp:comment_id>
		<wp:comment_author><![CDATA[中国博客网]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blogcn.com</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2011-08-20 22:44:54</wp:comment_date>
		<wp:comment_date_gmt>2011-08-20 14:44:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[你好，这是一条评论。<br />要删除这条评论，请先登录系统，查看这篇日志的评论列表，然后您就可以看到编辑或者删除评论的选项了。]]></wp:comment_content>
		<wp:comment_approved>post-trashed</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Typecast in C++</title>
		<link>http://spockwang.blogcn.com/articles/typecast-in-c.html</link>
		<pubDate>Mon, 22 Aug 2011 05:46:03 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[There are four types of type-cast in C++, which are preferred than the C-style cast.
<h2>static_cast</h2>
<tt>static_cast</tt> has following uses.
<ol>
<li> Cast between arithmetic types, such as casting from <tt>int</tt> to <tt>char</tt>.</li>
<li> Cast a value of integral type to an enumeration type.  In C++ a value of integral type can not be implicitly converted to an enumeration type, which is different from C.  The integral value must be in the range of the enumeration values.  (See clause 7, 5.2.9 of [C++ standard 98])</li>
<li> Cast a value of type "pointer to <tt>void</tt>" to a pointer to object type.  You must ensure that the original pointer is really pointing to the destination object type.</li>
<li> Cast any type to <tt>void</tt>.</li>
<li> Down-cast in case of pointer.  Convert a value of type "pointer to <tt>B</tt>" to a value of type "pointer to <tt>D</tt>", where <tt>B</tt> is a non-virtual base class of <tt>D</tt>.  You must make sure that the original pointer is really pointing to the sub-object of <tt>D</tt>. (See clause 8, 5.2.9 of [C++ standard 98])</li>
<li> Dow-cast in case of reference.  Convert a value of type "reference to <tt>B</tt>" to a value of type "reference to <tt>D</tt>", where <tt>B</tt> is a non-virtual base class of <tt>D</tt>.  You must make sure that the original reference is really referencing the sub-object of <tt>D</tt>. (See clause 5, 5.2.9 of [C++ standard 98])</li>
</ol>
<p>
Note that you cannot use <tt>static_cast</tt> to convert a value of type "pointer to <tt>int</tt>" to a pointer to <tt>char</tt>.  This is a frequent misuse of <tt>static_cast</tt>.  You have to use <tt>reinterpret_cast</tt> to do that.
</p>
<p>
All the conversions that <tt>static_cast</tt> does is done at compile-time, so what it can do is limited.  Due to lacking run-time info it just does basic type checking and can not make sure what you do is valid.  For example you may convert a pointer to a wrong type but <tt>static_cast</tt> can not figure it out.
</p>
<h2>dynamic_cast</h2>
<p>
Dynamic cast is usually used to convert a pointer to a base class to a pointer to a derived class.
</p>
<p>
Consider the following dynamic cast expression:
<code>
dynamic_cast&lt;T&gt;(v)
</code>
we have following situations
<ol>
<li> If <tt>v</tt> is a null pointer the result is the null pointer in <tt>T</tt> type. (See clause 4, 5.2.7 of [C++ standard 98])</li>
<li> Up-cast in case of pointer.  If <tt>v</tt> is a pointer to <tt>D</tt> and <tt>T</tt> is "pointer to <tt>B</tt>" where <tt>B</tt> is a base class of <tt>D</tt>, the result is a pointer to the unique <tt>B</tt> sub-object of <tt>D</tt>. (See clause 5, 5.2.7 of [C++ standard 98])</li>
<li> Up-cast in case of reference.  If <tt>v</tt> has type <tt>D</tt> and <tt>T</tt> is "reference to <tt>B</tt>" where <tt>B</tt> is a base class of <tt>D</tt>, the result is a reference to the unique <tt>B</tt> sub-object of <tt>D</tt>. (See clause 5, 5.2.7 of [C++ standard 98])</li>
<li> Down-cast and cross-cast.  If <tt>T</tt> is "pointer to <tt>void</tt>", the result is a pointer to the most derived object pointed to by <tt>v</tt>.  Otherwise, a run-time check is applied to see if the conversion is valid.  The value of a failed cast to pointer type is a null pointer.  A failed cast to reference type throws <tt>bad_cast</tt>.  (See clause 8, 5.2.7 of [C++ standard 98])</li>
</ol>
</p>

<h2>reinterpret_cast</h2>
<p>
This is the most dangerous type cast of all because the compiler and run-time will not do any check.  Just like what the name means it is a re-interpretation of the bit pattern of the original object.  The C++ standard does not guarantee that the bit pattern be not modified (See clause 3, 5.2.10 of [C++ standard 98]).  Use it judiciously.
</p>
<ol>
<li> Conversion between integral type and pointer type. </li>
<li> Conversion between different types of pointers. </li>
<li> Conversion between references which refer to different types. </li>
</ol>

<h2>const_cast</h2>
<p>
It can only be used to cast away cv-qualifiers and the original type must be a pointer or reference.  If the result of a <tt>const_cast</tt> that casts away const-qualifier is pointing to or referring to a object which is declared with const-qualifier, you can not use it to modify the underlying object (see clause 7, 5.2.11 and clause 7, 7.1.5.1 of [C++ standard 98]).
</p>

<h2>References</h2>
<ul>
<li> [C++ standard 98] <i>The C++ standard</i>, 1998.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[Simply describe the four types of cast in C++ and the situations in which it can be used.]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2011-08-22 13:46:03</wp:post_date>
		<wp:post_date_gmt>2011-08-22 05:46:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>typecast-in-c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1314718681]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>blogdesk-button-20110822140147.gif</title>
		<link>http://spockwang.blogcn.com/?attachment_id=10</link>
		<pubDate>Mon, 22 Aug 2011 06:01:48 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp05/M00/01/B8/wKgKDE5R8MwAAAAAAAAA8TxlhUk101.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2011-08-22 14:01:48</wp:post_date>
		<wp:post_date_gmt>2011-08-22 06:01:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blogdesk-button-20110822140147-gif</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp05/M00/01/B8/wKgKDE5R8MwAAAAAAAAA8TxlhUk101.gif</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>blogdesk-button-20110822140147.gif</title>
		<link>http://spockwang.blogcn.com/?attachment_id=11</link>
		<pubDate>Mon, 22 Aug 2011 06:01:48 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/00/F6/wKgKDU5R8MwAAAAAAAAA8Xjd60s678.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2011-08-22 14:01:48</wp:post_date>
		<wp:post_date_gmt>2011-08-22 06:01:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blogdesk-button-20110822140147-gif-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/00/F6/wKgKDU5R8MwAAAAAAAAA8Xjd60s678.gif</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>blogdesk-button-20110822140218.gif</title>
		<link>http://spockwang.blogcn.com/?attachment_id=12</link>
		<pubDate>Mon, 22 Aug 2011 06:02:18 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/01/A2/wKgKCk5R8OoAAAAAAAAA8X640-U490.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2011-08-22 14:02:18</wp:post_date>
		<wp:post_date_gmt>2011-08-22 06:02:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blogdesk-button-20110822140218-gif</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/01/A2/wKgKCk5R8OoAAAAAAAAA8X640-U490.gif</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>blogdesk-button-20110822140218.gif</title>
		<link>http://spockwang.blogcn.com/?attachment_id=13</link>
		<pubDate>Mon, 22 Aug 2011 06:02:18 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/01/77/wKgKC05R8OoAAAAAAAAA8Xbylbo078.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2011-08-22 14:02:18</wp:post_date>
		<wp:post_date_gmt>2011-08-22 06:02:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blogdesk-button-20110822140218-gif-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/01/77/wKgKC05R8OoAAAAAAAAA8Xbylbo078.gif</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>How to support Unicode in C/C++</title>
		<link>http://spockwang.blogcn.com/articles/how-to-support-unicode-in-cc.html</link>
		<pubDate>Fri, 09 Sep 2011 06:10:30 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
To support multilanguage in programs we have to decide an encoding for internal use.  It does not matter which encoding is used.  But it must be able to encode all Unicode  characters.  In this article I decide to use wide characters as the internal encoding because it is easy to use and has much support from standard C library.  The characters from the input is converted to wide characters for internal use.  All the logic of the program is based on the internal encoding.  When characters are required to transmitted to outside (e.g. print to <tt>stdout</tt> or across the network) they are converted to appropriate encoding.
</p>
<h2>Locale</h2>
<p>
The functions in the C library which does convertions between multi-byte characters and  wide characters is locale-specific (particularly the category <tt>LC_CTYPE</tt>).  Their behavior can be changed by <tt>setlocale</tt> defined in <tt>locale.h</tt>.  So when we want to convert from or to multi-byte characters we must set the value of <tt>LC_CTYPE </tt>correctly.
</p>
<p>
There is a global locale in C++, as there is in C.  Initially the global locale is the locale "C".  You can get current global locale by calling <code>std::locale::locale()</code>.  Except the global locale you can construct as many locales as you want and imbue each stream with a different locale object.  Working with many different locales becomes easy in C++, but in C you have to switch locales frequently.
</p>
<h2>Input</h2>
<p>
Often the characters from the input source is encoded using some multi-byte encoding like GBK or UTF-8.  We have to find a way to convert from these multi-byte encoding to wide characters defined in C.  Foutunately C library has provided many functions to do the conversion.  But we must take care to set the relevant locale category to make them work correctly.
</p>
<p>
We can use <tt>scanf</tt> to convert the input multi-byte sequence to wide characters, like the following which assmes the input characters are encoded in GBK.
<code>
wchar_t wcs[1024];
setlocale(LC_CTYPE, "zh_CN.GBK");
fscanf(fp, "%ls", wcs);
</code>
Or we can obtain the input as a byte-sequence and then call <tt>mbstowcs</tt> to do the conversion.
<code>
char bytes[1024];
int len;
wchar_t *wcs;
fscanf(fp, "%s", bytes);

 /* Get how many wide characters will be converted including NUL-terminator. */
setlocale(LC_CTYPE, "zh_CN.GBK");
len = mbstowcs(NULL, bytes, 0) + 1;
wcs = (wchar_t *) malloc(len * sizeof(*wcs));
mbstowcs(wcs, bytes, len);
</code>
But we must make sure the byte-sequence is a full valid multibyte sequence or <tt>-1</tt> is returned by the call to <tt>mbstowcs</tt>.
</p>
<p>
In C++ we can use <code>wistream</code> to convert the input multibyte sequence to wide characters.
<code>
wstring ws;  // define wide string to hold input
wcin.sync_with_stdio(false);
wcin.imbue(std::locale::locale("zh_CN.GBK"));
wcin &gt;&gt; ws;
</code>
Due to some limitations with it <code>iostream::imbue()</code> does not honor (but <code>fstream</code> does) the encoding we have to call <code>ios::sync_with_stdio(false)</code> to enable conversion. (See <a href="http://gcc.gnu.org/ml/libstdc++/2006-11/msg00058.html">http://gcc.gnu.org/ml/libstdc++/2006-11/msg00058.html</a>).
</p>
<p>
We can also obtain the input as a byte sequence and then convert it to the destination encoding.
<code>
// Assume the input byte sequence is in 'from' with GBK encoding.
string from;
locale loc("zh_CN.GBK");
const codecvt&lt;wchar_t, char, mbstat_t&gt;&amp; conv =
use_facet&lt;codecvt&lt;wchar_t, char, mbstat_t&gt; &gt;(loc);
mbstat_t mystate;

// Calculate how many characters there are in 'from'.
int length = conv.length(mystate, from.c_str(), from.c_str()+from.length(),
numeric_limits&lt;size_t&gt;::max());

wchar_t *pws = new wchar_t[length+1];
pws[length] = L'\0';
const char *from_next;
wchar_t *to_next;
codecvt&lt;wchar_t, char, mbstate_t&gt;::result myresult  =
conv.in(mystate, in.c_str(), in.c_str()+in.length(), from_next,
pws, pws+length, to_next);
if (myresult == codecvt&lt;wchar_t, char, mbstate_t&gt;::ok) {
&nbsp;&nbsp;&nbsp;&nbsp;// Conversion is ok.
&nbsp;&nbsp;&nbsp;&nbsp;...
}
</code>
</p>
<h2>Output</h2>
When wide characters are printed to the standard output they must be converted to multibyte sequence with the encoding specified by <tt>LC_CTYPE</tt> environment variable.  This is easy to do with <tt>setlocale</tt>.
<code>
/* Print wide characters in 'wcs'. */
setlocale(LC_CTYPE, "");
printf("%ls\n", wcs);
</code>
Or equivalently in C++:
<code>
// Assume wide string is in 'ws'.
ios::sync_with_stdio(false);
wcout.imbue(locale(""));
wcout &lt;&lt; ws &lt;&lt; endl;
</code>

If we want to print wide characters to other destinations (files or network) we can convert the wide characters to multibyte sequence with the expected encoding by set the category <tt>LC_CTYPE</tt>.  For example the following code convertes wide characters to multibyte
sequence in GBK encoding.
<code>
/* Assume wide characters is in 'wcs'. */
setlocale(LC_CTYPE, "zh_CN.GBK");
int len = wcstombs(NULL, wcs, 0)+1;
char *buf = (char *) malloc(len * sizeof(*buf));
wcstombs(buf, wcs, len);
</code>
Or equivalently in C++:
<code>
// Assume wide string is in 'ws'.
locale loc("zh_CN.GBK");
const codecvt&lt;wchar_t, char, mbstate_t&gt;&amp; conv =
use_facet&lt;codecvt&lt;wchar_t, char, mbstate_t&gt; &gt;(loc);

// At most 'len' bytes are required to store the string in
// multibyte sequence.
int len = conv.max_length() * (ws.length()+1);
char *pstr = new char[len];
const wchar_t *pwc;
char *pc;
mbstate_t mystate;
codecvt&lt;wchar_t, char, mbstate_t&gt;::result myresult =
conv.out(mystate, ws.c_str(), ws.c_str()+ws.length()+1, pwc,
pstr, pstr+ws.length()+1, pc);
if (myresult == codecvt&lt;wchar_t, char, mbstate_t&gt;::ok) {
 &nbsp;&nbsp;&nbsp;&nbsp;// Conversion is ok.
 &nbsp;&nbsp;&nbsp;&nbsp;...
}
</code>
<h2>Frequent tasks with wide characters and strings</h2>
<p>
The C library functions which handle wide characters are often prefixed with <tt>wcs</tt>.  For the functions which handle <tt>char</tt> type characters there is an equivalent function which handles wide characters.
</p>
<h2>References</h2>
<ul>
	<li><em>C: A Reference Manual</em>, Fifth Edition.</li>
	<li><a href="http://www.evanjones.ca/unicode-in-c.html">http://www.evanjones.ca/unicode-in-c.html</a></li>
	<li><a href="http://www.cl.cam.ac.uk/~mgk25/unicode.html">http://www.cl.cam.ac.uk/~mgk25/unicode.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2011-09-09 22:10:30</wp:post_date>
		<wp:post_date_gmt>2011-09-09 06:10:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-support-unicode-in-cc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1315548906]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Quotes</title>
		<link>http://spockwang.blogcn.com/articles/quotes.html</link>
		<pubDate>Sun, 20 Nov 2011 15:42:46 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category domain="tag"><![CDATA[名言警句]]></category>

		<category domain="tag" nicename="%e5%90%8d%e8%a8%80%e8%ad%a6%e5%8f%a5"><![CDATA[名言警句]]></category>

		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
真正的安全感，来自你对自己的信心，是你每个阶段性目标的实现，而真正的归属感，在于你的内心深处对自己命运的把控，因为你最大的对手永远都是自己。<br />
—— <em>匿名</em>
</p>
<p>
与所有的人以诚相待，同多数人和睦相处，和少数人常来常往，只跟一个人亲密无间。<br />
—— <em>富兰克林</em>
</p>
<p>
Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.<br />
-- <em>Antoine de Saint-Exupéry</em>
</p>
<p>
在你身上发生的事件，并不能揭示你是一个什么样的人。事情发生以后，你的反应，你的选择，这些才昭显了“你是谁”。命运决定不了我们的生命，命运降临时，我们的选择，决定了我们是谁。<br />
-- <em>罗伯特·麦基</em>
</p>
<p>
真正成熟的人，就是能重新找回小时候玩游戏的那种认真。<br />
-- <em>尼采</em>
</p>
<p>
世界只存在一种成功 —— 做到以自己的方式度过一生。<br />
-- <em>克里斯托弗·莫里</em>
</p>
<p>
你不要去倡导那些你认为大家如果相信了会有益的事情，你只需了解真相、事实。我们常把生活模式化，按照别人或书本上教给我们的概念去生活，大到政治，小到与人交往，不肯接受与自己想象不同的事情。你只有把原先头脑中像水泥一样固化的观念用力抖落，才能认清世界的本来面目。<br />
-- <em>罗素</em>
</p>
<p>
一切特立独行的人格都意味着强大。<br />
<em>-- 加缪</em>
</p>
<p>
我们最终是因为没有思想，所以才发现我们没有钱。我们最初是因为耽溺于肉欲，所以才觉得一定要有钱。<br />
-- <em>爱默生</em>
</p>
<p>
教育的目的，并非制造学者、专家、寻找工作的人，而是培养完整的男男女女，使他们从恐惧之中解脱出来；因为惟有在这样的人之中，才有持久的和平。<br />
-- <em>克里希那穆提</em>
</p>
<p>
如果你真的想做一件事，你一定会找到一个方法；如果你不想做一件事，你一定会找到一个借口。<br />
-- <em>匿名</em>
<p>
这个国家最让我心悸的，不是国家机器任意妄为地作恶，而是占据主流力量的普通人纷纷告诉你：这个国家就是这样的，你改变不了的，习惯了就行。他们可能是你的同学，同事，朋友，亲人，爱人。只要自己不被伤害，他们可以容忍任何人被伤害。<br  />
<em>--匿名</em>
</p>
<p>
我们必须不能停止探索，而一切探索的尽头，就是重回起点，并首次对起点有真正的了解。<br />
<em>--艾略特</em>
</p>
<p>
重大问题发生时，依我们当时的思想水准往往无法解决。<br />
<em>--爱因斯坦</em>
</p>
<p>
如果我们时时忙着展现自己的知识，将何从忆起成长所需的无知？<br />
<em>--梭罗</em>
</p>
<p>
人的行为总是一再重复。因此，卓越不是单一的举动，而是习惯。<br />
-- <em>亚里斯多德</em>
</p>
<p>
The key is to find the actionable investments where you disagree with the consensus.<br /> 
-- <em>Paul Kedrosky, a venture capitalist</em>
</p>
<p>
Genius is one percent inspiration and ninety-nine per cent perspiration. Accordingly, a 'genius' is often merely a talented person who has done all of his or her homework.<br />
<em>--Thomas Edison. From <a href="http://en.wikiquote.org/wiki/Thomas_Edison">http://en.wikiquote.org/wiki/Thomas_Edison</a></em>
</p>
<p>
Many of life's failures are people who did not realize how close they were to success when they gave up.<br />
-- <em>Thomas Edison. From&nbsp;<a href="http://en.wikiquote.org/wiki/Thomas_Edison">http://en.wikiquote.org/wiki/Thomas_Edison</a></em>
</p>
<p>
Common sense is not so common.<br />
<em>--Voltaire, Dictionnaire Philosophique (1764)</em>
</p>
<p>
All history is a record of the power of minorities, and of minorities of one.<br /> 
-- <em>Ralph Waldo Emerson</em>
</p>
<p>
God, grant me the serenity to accept the things I cannot change, the courage to change the things I can change, and the wisdom to know the difference.<br />
-- <em>Reinhold Niebuhr</em>
</p>
<p>
Treat a man as a he is and he will remain as he is.  Treat a man as he can and should be and he shall become as he can and should be. <br />
<em>--歌德</em>
</p>
<p>
The whole of science is nothing more than a refinement of everyday thinking.<br />
<em>--Albert Einstein</em>
</p>
<p>
Be the change you want to see in the world.<br />
<em>--Gandhi</em>
</p>
<p>
有其言，无其行，君子耻之。<br />
<em>--子思</em>
</p>
<p>
生活中的问号是开拓未来的钥匙。<br />
<em>-- 巴尔扎克</em>
</p>
<p>
人间最大的智慧在于洞悉本身的弱点。<br />
<em>-- 法国谚语</em>
</p>
<p>
言者无罪，闻之者足以戒。<br />
<em>-- 子夏</em>
</p>
<p>
夫君子之行，静以修身，俭以养德。非淡泊无以明志，非宁静无以致远。夫学，欲静也；才，须学也。非学无以广才，非静无以成学。慆慢则不能研精，险躁则不能理性。年与时驰，意与日去，遂成枯落，多不接世。悲守穷庐，将复何及！<br />
 <em>-- 诸葛亮，《诫子书》</em>
</p>
<p>
好读书，不求甚解；每有会意，便欣然望食。<br />
<em>-- 陶渊明</em>
</p>
<p>
机遇只偏爱有准备的头脑。<br />
<em>-- 巴斯德</em>
</p>
<p>
知之者不如好之者，好之者不乐之者。 <br />
<em>-- 孔子</em>
</p>
<p>
君子之交淡如水，小人之交甘若醴。<br />
<em>-- 庄子</em>
</p>
<p>
思考是人类最大的快乐。<br />
<em>-- 伽利略</em>
</p>
<p>
书山有路勤为径，学海无涯苦作舟。<br />
<em>-- 韩愈</em>
</p>
<p>
读而未晓则思，思而未晓则读。<br />
<em>-- 朱熹</em>
</p>
<p>
纸上得来终觉浅，绝知此事要躬行。<br />
<em>-- 陆游</em>
</p>
<p>
The measure of a man's real character is what he would do if he knew he never would be found out.<br />
<em>-- Thomas Babington Macaulay</em>
</p>
<p>
The important thing in life is to have a great aim and the determination to attain it.<br />
<em>-- Goethe</em>
</p>
<p>
古之成大事业、大学问者，必经三种之境界：昨夜西风凋碧树，独上高楼，望尽天涯路。此第一境也。衣带渐宽终不悔，为伊消得人憔悴。此第二境也。众里寻他千百度，蓦然回首，那人却在灯火阑珊处。此第三境也。<br />
<em>-- 王国维</em>
</p>
<p>
A pessimist makes difficulties of his opportunities, an optimist makes opportunities of his difficulties.<br />
<em>-- Harry Truman</em>
</p>
<p>
The unexamined life is not worth living.<br />
<em>-- Socrates</em>
</p>
<p>
科学的真理不应在古代圣贤的蒙着灰尘的书上去寻找，而应该在试验中和以实验为基础的理论中去找。真正的哲学是写在那本经常在我们眼前打开着的最伟大的书里面的。这本书就是宇宙，就是自然本身，人们必须去读它。 <br />
<em>-- 伽利略，《关于托勒密和哥白尼两大世界体系的对话》</em>
</p>
<p>
你想知道一个人内心里缺乏什么，不看别的，就看他炫耀什么；你想知道一个人自卑什么，不看别的，就看他掩饰什么。<br />
<em>-- 匿名</em>
</p>
<p>
The one real object of education is to leave a man in the condition of continually asking questions.<br />
<em>--Bishop Creighton</em>
</p>
<p>
生活乐趣的大小是随我们对生活的关心程度而定的。<br />
<em>--蒙田</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2011-11-21 07:42:46</wp:post_date>
		<wp:post_date_gmt>2011-11-20 15:42:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quotes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1345352611]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>随机采样</title>
		<link>http://spockwang.blogcn.com/articles/%e9%9a%8f%e6%9c%ba%e9%87%87%e6%a0%b7.html</link>
		<pubDate>Sun, 11 Dec 2011 16:16:54 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>问题描述</h2>
从一个预先不知道其大小的集合中随机选出<code>K</code>个数字。
<h2>算法</h2>
<em>Input:</em> <code>K</code>，和一系列数字。
<em>Output:</em>随机选出的<code>K</code>个数字。
<pre>R := [ ];     # 初始化为一个空数组。
N := 0;       # 已经考虑的数字的个数。
for next number i
begin
     N := N + 1;
     if size(R) &lt; K
     then
          R := [ R, i ];      # 将数字i添加到数组R中。
     else
          j := randint(0, N);
          if j &lt; K
          then
                R[j] = i;
          end
     end
end</pre>
其中<tt>randint(0, N)</tt>等概率地返回<tt>[0, N)</tt>中的一个整数。结束后<code>R</code>中的<code>K</code>个数字就是我们需要的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2011-12-12 00:16:54</wp:post_date>
		<wp:post_date_gmt>2011-12-11 16:16:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9a%8f%e6%9c%ba%e9%87%87%e6%a0%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1344065652]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>配置Subversion</title>
		<link>http://spockwang.blogcn.com/articles/%e9%85%8d%e7%bd%aesubversion.html</link>
		<pubDate>Thu, 02 Feb 2012 14:34:10 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Administration]]></category>

		<category domain="category" nicename="administration"><![CDATA[Administration]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>
	配置Subversion服务器使用xinetd启动
</h2>
<ol>
	<li>
		建立/etc/xinetd.d/svn，内容如下：
	</li>
	<pre class="border">service svn
{
    disable = no
    id = svn-stream
    socket_type = stream
    protocol = tcp
    user = xxx   # 运行svnserve的用户名
    wait = no
    server = /usr/bin/svnserve
    server_args = -i -r /path/to/repository
}

service svn
{
    disable = no
    id = svn-dgram
    socket_type = dgram
    protocol = udp
    user = xxx   # 运行svnserve的用户名
    wait = yes
    server = /usr/bin/svnserve
    server_args = -i -r /path/to/repository
}</pre>
	<li>
		重启xinetd服务器。
	</li>
	<pre class="border">$ sudo invoke-rc.d xinetd restart
</pre>
	接下来我们就可以采用svn协议访版本库中的数据了。
</ol>
<h2>
	建立SVN仓库
</h2>
<ol>
	<li>
		确定仓库的地址，假设为<code>/home/svn</code>.
	</li>
	<li>
		创建一个仓库，名为<code>repos</code>:
		<pre class="indent">$ svnadmin create /home/svn/repos
</pre>
	</li>
	<li>
		配置仓库访问控制。编辑<code>/home/svn/repos/conf/svnserve</code>：
		<pre class="border">[general]
# ...
anon-access = read
auth-access = write
# ...
password-db = passwd
...
</pre>
		在<code>[general]</code>下有几个属性控制访问权限。<code>anon-access</code>控制匿名用户的访问权限，<code>auth-access</code>控制授权用户的访问权限，它们可以为<code>&quot;read&quot;, &quot;write&quot;, &quot;none&quot;</code>。权限控制有几种方式，最简单的一种是通过密码文件来授权。密码文件的位置由<code>password-db</code>指定,一般就放在与<code>svnserve</code>同一目录下，叫<code>passwd</code>，格式如下：
		<pre class="border">name = password</pre>
		等号左边是用户名，右边是密码。如果不允许匿名操作，则需要输入密码。
	</li>
	<li>
		导入需要版本控制的数据。假设数据在<code>tree</code>目录下，要导入到刚刚建立的仓库中：
		<pre class="border">$ svn import tree svn://svnhost/repos/project
</pre>
	</li>
</ol>
<hr />
<p>
	<em>Updated: 2011-03-04 15:55</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2012-02-02 22:34:10</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:34:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%85%8d%e7%bd%aesubversion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328193250]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>查看进程的内存使用情况</title>
		<link>http://spockwang.blogcn.com/articles/%e6%9f%a5%e7%9c%8b%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5.html</link>
		<pubDate>Thu, 02 Feb 2012 14:36:36 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>
	用ps命令查看进程的内存
</h2>
<p>
	<code>ps</code>命令是Linux下常见的查看进程状况的程序，它有几个字段可以用来查看进程内存使用情况：sz，rss，vsz。分别说明如下：
</p>
<ul>
	<li>
		sz：进程映像所占用的物理页面数量，也就是以物理页面为单位表示的虚拟内存大小；
	</li>
	<li>
		rss：进程当前所占用的物理内存大小，单位为kB；
	</li>
	<li>
		vsz：进程的虚拟内存大小，单位为kB，它等于sz乘于物理页面大小（x86平台通常为4kB）。
	</li>
</ul>
<p>
	假如我要查看程序a.out的内存使用情况，操作如下：
</p>
<pre class="borderindent">$ <kbd>./a.out &amp;</kbd>
<samp>[1] 10069&nbsp;</samp>
$ <kbd>ps -O sz,rsz,vsz</kbd>
<samp>PID    SZ   RSS    VSZ S TTY          TIME COMMAND
 6793  1545  3648   6180 S pts/2    00:00:00 /bin/bash
10069   404   304   1616 S pts/2    00:00:00 ./a.out
10070   626   876   2504 R pts/2    00:00:00 ps -O sz,rss,vsz</samp></pre>
<p>
	上面ps命令的输出的第3行就是./a.out自行后的相关情况。我们可以看出，它的虚拟 内存大小为1616kB，当前占用的物理内存为304kB（其它数据在磁盘上或交换分区），虚 拟内存占用404个物理页面。由于我的机器的物理页面大小为4kB，可以验证404 x 4kB等于1616kB。
</p>
<h2>
	用/proc文件系统查看进程的内存使用情况
</h2>
<p>
	<tt>ps</tt>命令的输出关于内存的情况不是很详细，尤其是进程所使用的内存中有很大一部分是共享库函数使用的，因此通过<tt>ps</tt>命令的输出看不到进程自己使用了多少内存。为了查看更详细的信息，可以借助于<tt>/proc</tt>文件系统。这个文件系统并存在于磁盘上，但是可以象操作其它普通文件一样操作它。它是Linux提供给用户查看进程相关信息的接口。在<tt>/proc</tt>下有2个文件和进程内存有关：<tt>/proc/&lt;pid&gt;/status</tt>和<tt>/proc/&lt;pid&gt;/smaps</tt>。
</p>
<p>
	通过<tt>/proc/&lt;pid&gt;/status</tt>可以查看进程的内存使用情况，包括虚拟内存大小（VmSize），物理内存大小（VmRSS），数据段大小（VmData），栈的大小（VmStk），代码段的大小（VmExe），共享库的代码段大小（VmLib）等等。
</p>
<pre class="borderindent">$ <kbd>cat /proc/10069/status</kbd>
<samp>Name:   a.out
State:  S (sleeping)
Tgid:   10069
Pid:    10069
PPid:   6793
TracerPid:      0
Uid:    1001    1001    1001    1001
Gid:    1001    1001    1001    1001
FDSize: 256
Groups: 1000 1001 
VmPeak:     1692 kB
VmSize:     1616 kB
VmLck:         0 kB
VmHWM:       304 kB
VmRSS:       304 kB
VmData:       28 kB
VmStk:        88 kB
VmExe:         4 kB
VmLib:      1464 kB
VmPTE:        20 kB
Threads:        1
SigQ:   0/16382
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: 0000000000000000
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: ffffffffffffffff
Cpus_allowed:   f
Cpus_allowed_list:      0-3
Mems_allowed:   1
Mems_allowed_list:      0
voluntary_ctxt_switches:        1
nonvoluntary_ctxt_switches:     1</samp></pre>
<p>
	注意，VmData，VmStk，VmExe和VmLib之和并不等于VmSize。这是因为共享库函数的数据段没有计算进去（VmData仅包含a.out程序的数据段，不包括共享库函数的数据段，也不包括通过mmap映射的区域。VmLib仅包括共享库的代码段，不包括共享库的数据段）。
</p>
<p>
	通过<tt>/proc/&lt;pid&gt;/smaps</tt>可以查看进程整个虚拟地址空间的映射情况，它的输出从低地址到高地址按顺序输出每一个映射区域的相关信息，如下所示：
</p>
<pre class="borderindent">$ <kbd>cat /proc/10069/smaps</kbd>
<samp>00110000-00263000 r-xp 00000000 08:07 128311     /lib/tls/i686/cmov/libc-2.11.1.so
Size:               1356 kB
Rss:                 148 kB
Pss:                   8 kB
Shared_Clean:        148 kB
Shared_Dirty:          0 kB
Private_Clean:         0 kB
Private_Dirty:         0 kB
Referenced:          148 kB
Swap:                  0 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB
......
......
bfd7f000-bfd94000 rw-p 00000000 00:00 0          [stack]
Size:                 88 kB
Rss:                   8 kB
Pss:                   8 kB
Shared_Clean:          0 kB
Shared_Dirty:          0 kB
Private_Clean:         0 kB
Private_Dirty:         8 kB
Referenced:            8 kB
Swap:                  0 kB
KernelPageSize:        4 kB
MMUPageSize:           4 kB</samp></pre>
<p>
	注意：<tt>rwxp</tt>中，<tt>p</tt>表示私有映射（采用Copy-On-Write技术）。<tt>Size</tt>字段就是该区域的大小。
</p>
<h2>
	参考文献
</h2>
<ul>
	<li>
		ps(1) -O选项。
	</li>
	<li>
		proc(5) /proc/[pid]/status和/proc/[pid]/smaps条目。
	</li>
</ul>
<hr />
<p>
	<em>Updated: 2011-03-04 17:11</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2012-02-02 22:36:36</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:36:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9f%a5%e7%9c%8b%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328193506]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Computer Quotes</title>
		<link>http://spockwang.blogcn.com/articles/computer-quotes.html</link>
		<pubDate>Thu, 02 Feb 2012 14:43:00 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
	Controlling complexity is the essence of computer programming.<br />
	<em>-- p.319, &quot;Software Tools&quot;</em>
</p>
<p>
	If our basic tool, the language in which we design and code our programs, is also complicated, the language itself becomes part of the problem rather than part of its solution.<br />
	<em>-- C.A.T Hoare, Turing Award Lecture</em>
</p>
<p>
	I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.<br />
	<em>-- C. A. T Hoare, Turing Award Lecture</em>
</p>
<p>
	A distributed system is one in which the failure of a computer you didn't even know existed can render your own computer unusable.<br />
	<em>-- Leslie Lamport</em>
</p>
<p>
	The important thing is to start with a good design. &nbsp;It is much easier to relax the standards for something well written than it is to tighten them for something badly written.<br />
	<em>-- p.257, &quot;Software Tools&quot;</em>
</p>
<p>
	Our rule is always: Write something clean and acceptable that works, then polish it later if necessary.<br />
	<em>-- p.265, &quot;Software Tools&quot;</em>
</p>
<p>
	But we try to avoid such solutions, convenient as they may at first appear, because they violate a basic principle of top-down design: every function should return to where it is called. &nbsp;This way, strategy is kept visible (and changeable) at the highest level of the code, and execution proceeds strictly from top to bottom.<br />
	<em>-- p.47, &quot;Software Tools&quot;</em>&nbsp;
</p>
<p>
	The value of a telecommunications network is proportional to the square of the number of connected users of the system (n<sup>2</sup>).<br />
	-- <a href="http://en.wikipedia.org/wiki/Metcalfe's_law" target="_blank"><em>Metcalfe's law</em></a>
</p>
<p>
Given enough eyeballs, all bugs are shallow.<br />
	-- <em>Eric&nbsp;Steven Raymond&nbsp;puts it as &quot;<a href="http://en.wikipedia.org/wiki/Linus'_Law" target="_blank">Linus' Law</a>&quot;</em>
</p>
<p>
	Program testing can be used to show the presence of bugs, but never to show their absence.<br />
	<em>-- Dijkstra</em>
</p>
<p>
C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do, it blows away your whole leg. <br />
<em>-- Bjarne Stroustrup, creator of C++</em>
</p>
<p>
Sometimes, the elegant implementation is just a function. Not a method. Not a class. Not a framework. Just a function.<br />
<em>-- John Carmack</em>
</p>
<p>
Such is modern computing: everything simple is made too complicated because it's easy to fiddle with; everything complicated stays complicated because it's hard to fix.<br />
<em>-- Rob Pike</em>
</p>
<p>
Java is like a variant of the game of Tetris in which none of the pieces can fill gaps created by the other pieces, so all you can do is pile them up endlessly.<br />
<em>-- Steve Yegge</em>
</p>
<p>
Languages that try to disallow idiocy become themselves idiotic.<br />
<em>-- Rob Pike</em>
</p>
<p>
The problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.<br />
<em>-- Joe Armstrong</em>
</p>
<p>
The purpose of software engineering is to control complexity, not to create it.<br />
<em>-- Dr. Pamela Zave</em>
</p>
<p>
"design patterns" are concepts used by people who can't learn by any method except memorization, so in place of actual programming ability, they memorize "patterns" and throw each one in sequence at a problem until it works.<br />
<em>-- Jason Garrett-Glaser (a.k.a. Dark_Shikari)</em>
</p>
<p>
The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.<br />
<em>-- Paul Graham</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2012-02-03 06:43:00</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:43:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>computer-quotes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1332121598]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>在Windows上配置Emacs 23</title>
		<link>http://spockwang.blogcn.com/articles/%e5%9c%a8windows%e4%b8%8a%e9%85%8d%e7%bd%aeemacs-23.html</link>
		<pubDate>Thu, 02 Feb 2012 14:45:56 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Administration]]></category>

		<category domain="category" nicename="administration"><![CDATA[Administration]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>
	Emacs的配置文件
</h2>
<p>
	在Windows下，Emacs的配置文件存放在被Emacs称为HOME的目录下。默认情况下该目录是C:/Users/&lt;login name&gt;/AppData/Roaming/（Windows 7）。这个目录可以通过环境变量HOME来设置。
</p>
<h2>
	启用Emacs的服务器模式
</h2>
<p>
	Emacs有一个服务器模式，就是先启动Emacs服务器，然后每当编辑文件时启动Emacs客户端。这个客户端会与这个服务器联系，让其来完成各种编辑命令。这样就不用重新再启动另一个Emacs实例来编辑文件，不管编辑多少个文件都只要一个Emacs实例（即进程）就可以了。
</p>
<p>
	为了达到这个目的，需要做以下几步设置：
</p>
<ol>
	<li>
		在~/.emacs中加入<br />
		(server-start)<br />
		这样Emacs第一次启动时会启动服务器。
	</li>
	<li>
		设置环境变量EMACS_SERVER_FILE为“%HOME%/.emacs.d/server/server”。这是Emacs客户端与服务器用来通信的。每当服务器启动时都会建立这个文件，退出时删除这个文件。这个环境变量告诉Emacs客户端服务器建立的文件在哪里。
	</li>
</ol>
<h2>
	将Emacs加入右键菜单
</h2>
<p>
	将Emacs加入资源管理器的右键菜单可以大大方便用Emacs编辑文件。而这个可以通过编辑注册表来实现。
</p>
<p>
	在DOS命令行中用regedit命令打开注册表编辑器。在“HKEY_CLASSES_ROOT/*/Shell”下新建一名为“Edit with Emacs”（可自由命名）的项，然后在这个项下再建一个名叫“command”（必须如此命名）的项，将其值设为“&lt;emacs-install-dir&gt;/bin/emacsclientw.exe -a &lt;emacs-install-dir&gt;/bin/runemacs.exe -n %1”。这样就可以了。其中&lt;emacs-install-dir&gt;表示Emacs的安装目录。emacsclientw.exe是Emacs客户端，-a和-n都是它的选项参数，可通过emacsclientw.exe –help查看。-a表示若Emacs服务器没有启动则启动该选项的值所表示的编辑器。
</p>
<p>
	&nbsp;
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2012-02-02 22:45:56</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:45:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%9c%a8windows%e4%b8%8a%e9%85%8d%e7%bd%aeemacs-23</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328193959]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>打印螺旋矩阵</title>
		<link>http://spockwang.blogcn.com/articles/%e6%89%93%e5%8d%b0%e8%9e%ba%e6%97%8b%e7%9f%a9%e9%98%b5.html</link>
		<pubDate>Thu, 02 Feb 2012 14:49:36 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
	螺旋矩阵是一个nxn的方阵，其中元素为自然数，但像螺旋方向一样递增。举例如下：
</p>
<p>
	若n = 3，螺旋矩阵为：
</p>
<pre>1   2   3
8   9   4
7   6   5</pre>
<p>
	若n = 4，螺旋矩阵为：
</p>
<pre> 1   2   3   4
12  13  14   5
11  16  15   6
10   9   8   7</pre>
<pre>若n = 5，螺旋矩阵是：</pre>
<pre> 1   2   3   4   5
16  17  18  19   6
15  24  25  20   7
14  23  22  21   8
13  12  11  10   9</pre>
<p>
那么如何打印这样的矩阵呢？当然它的规律很简单，直接的方法就是先申请一个矩阵，然后按螺旋方向填入相应的元素，填充完毕后再打印出来。它的时间复杂度为O(n<sup>2</sup>)，已经是最优的（为什么？）。空间复杂度也为O(n<sup>2</sup>）。似乎已经很好了。
</p>
<p>
	但是还不够好。
</p>
<p>
	按照矩阵规律填充元素时，我们是随机访问矩阵元素的（如果可以按顺序访问，根本不用先存起来再打印）。随机访问内存，效率当然不高。所以即使时间复杂度已为最优，但那只是理论上的最优，在实践中表现并不一定就好。
</p>
<p>
	假如能根据行列号直接计算出对应的矩阵元素就好了。当n给定后，这个矩阵就已经唯一确定了，那么每一个元素也是确定的。也就是说，每一个位置放什么元素仅仅取决于n。因此我们可以找到一个函数<em>element</em>(<em>i, j</em>)，将行号i和列号j映射成对应这个行列号的元素。当然这个函数肯定不是一个简单的函数，不是一眼就可以看出来的，但也并不是不可能。
</p>
<p>
	现在我们就来考查一下这个矩阵有什么特点。注意观察一下螺旋矩阵的最外层，它的左上角的元素是最小的，然后沿顺时针方向递增，就如同一个环一样（比如n为4时，1, 2, ..., 12就是最外面一层环）。再注意一下里面一层，也是一样，顺时针方向递增的一个环（比如n为4时，13, 14, 15, 16就是里面一层环）。以此类推，环里面还有一层环（n为4时有2层环，n为5时有3层环，最里面一层只有一个元素25），实际上是一个圆环套圆环结构。每一圆环最关键的元素就是左上角的那一个元素。只要知道了这个元素，再加上这个正方形环的边长就可以计算出剩下的元素。设左上角元素为a，边长为l（ell），也就是边上有几个元素，并假设左上角的行号和列号均为0，其它元素的行号和列号都以它作参考，计算方法如下所示：
</p>
<p>
	1. 若i == 0，<em>element</em>(<em>i, j</em>) = a + j;
</p>
<p>
	2. 否则若j == 0，<em>element</em>(<em>i, j</em>) = a + 4(l-4) - (i-1) - 1;
</p>
<p>
	3. 否则若i == l-1，<em>element</em>(<em>i, j</em>) = a + 4(l-4) - (l-2) - 1 - j;
</p>
<p>
	4. 否则<em>element</em>(<em>i, j</em>) = a + l - 1 + i;
</p>
<p>
	剩下的问题就是如何确定左上角的元素，以及当前环在第几层（最外层是第0层，往里面依次递增）。这些都好办。代码如下：
</p>
<p>
	<textarea cols="50" rows="15" name="code" class="cpp:firstline[1]">int matrix(int i, int j, int n)
{
     int m, a, l;
     m = min(min(i, n-1-i), min(j, n-1-j));   // 当前环在第几层。
     i -= m;      // 换算成相对于当前层左上角元素的行列号。
     j -= m;
     a = 1 + 4*m*(n-m);        // 计算左上角元素。
     l = n - 2*m;                   // 当前环的边长。
     if (i == 0)
          return a+j;
     else if (j == 0)
          return a + 4*(l-1) - i;
     else if (i == l-1)
          return a + 4*l - 3 - l - j;
     /* else j == m-1 */
     return a + l-1 + i;
}</textarea></p>
<p>其实这种方法不仅可以用于这种矩阵，对于其它有各种规律的矩阵也可以用这种方法，关键是找出那个函数的定义。推而广之，许多问题实际上在数学上都可以找到这种简单答案（所谓简单答案，我指的是类似于级数求和的闭式（closed form），不用递归或循环计算出答案，而是在有限的步骤之内算出答案。所谓有限是指与问题规模无关。像上面的问题，计算步骤就与矩阵元素个数无关），我们应当尽量地去找这种简单的答案，而不是用计算机模拟求解。比如约瑟夫（Josephus）环问题，有一个漂亮的简单答案，在常量时间内算出，根本不需用链表或数组模拟。当然，也有许多问题没有这么漂亮的解法，只好用计算机模拟求解，不过最好还是尽量想办法找到这种简单的解法。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2012-02-03 06:49:36</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:49:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%89%93%e5%8d%b0%e8%9e%ba%e6%97%8b%e7%9f%a9%e9%98%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194177]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>比特操纵技巧</title>
		<link>http://spockwang.blogcn.com/articles/%e6%af%94%e7%89%b9%e6%93%8d%e7%ba%b5%e6%8a%80%e5%b7%a7.html</link>
		<pubDate>Thu, 02 Feb 2012 14:50:31 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>
	计算数据二进制表示中1的个数
</h3>
<p>
	比如3（11<sub>2</sub>）有2个，4（100<sub>2</sub>）有1个，0（0<sub>2</sub>）有0个。
</p>
<p>
	&nbsp;
</p>
<p>
	最直接的方法当然是每次将其右移一位，若移出的比特为1则加1。它时间复杂度正比于数据宽度。还有一种更简单的方法如下所示：
</p>
<p>
	<span style="font-family: monospace;font-size:16px;"><span style="white-space: pre-wrap;"><textarea cols="50" rows="15" name="code" class="cpp">int count_ones(unsigned int x)
{
        int sum = 0;              // Count how many ones in x.
        while (x != 0) {
                sum++;
                x = x &amp; (x-1);     // 这句是关键。
         }
         return sum;
}</textarea> </span></span></p>
<p>注意上面第6行代码是关键。它的作用是将x最右边的比特1置为0，直到x变为0。它的时间复杂度正比于x中比特1的个数。</p>
<p>&nbsp;</p>
<p>当然，还有更快的算法。我们可以将问题的答案存在一张表里，通过查表法乃解决，相当于通过空间来换取时间。比如，我们可以把一个字节的所有情况（共256个）存在一张表格中，这样我们可以每次处理一个字节，这比上面的算法要快得多，当然也要更多的空间。</p>
<p>&nbsp;</p>
<p>另见：<a href="http://www.msra.cn/Articles/ArticleItem.aspx?Guid=edb3a02b-6d5e-42c7-b2a5-4ae4a18f4254#.">智慧碰撞（求二进制数中1的个数）</a>。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2012-02-02 22:50:31</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:50:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%af%94%e7%89%b9%e6%93%8d%e7%ba%b5%e6%8a%80%e5%b7%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194232]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>生成可执行的共享库</title>
		<link>http://spockwang.blogcn.com/articles/%e7%94%9f%e6%88%90%e5%8f%af%e6%89%a7%e8%a1%8c%e7%9a%84%e5%85%b1%e4%ba%ab%e5%ba%93.html</link>
		<pubDate>Thu, 02 Feb 2012 14:55:50 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
	Linux系统下共享对象文件和可执行文件的格式都是ELF格式，它们并没有什么本质  上的区别。共享对象文件也是可以执行的。例如Linux下动态链接器ld-linux.so就  是共享对象文件，它也可以像可执行文件一样执行；Glibc库函数也是一样。
</p>
<p>
	共享对象文件要执行有2个问题要解决：
</p>
<ol>
	<li>
		共享对象文件的<strong>加载地址(loading address)</strong>是随机的（由操作系统决定恰当的地址），不像可执行文件，每次都加载到相同的固定地址（在Linux下是0x8048000）。因此，共享对象要能正确执行，必须编译成<strong>位置无关代码（Position Independent Code, PIC）</strong>。这可以通过gcc的-fpic选项得到。
	</li>
	<li>
		共享对象也会用到其他的共享库函数（如C语言库函数），引用的外部符号都必须被<strong>解析和重定位</strong>，而这些必须在运行时完成。这就需要动态链接器的帮助。所以，共享对象必须编译成依赖动态链接器，也就是说共享对象文件要有<strong>.interp段</strong>。若没有这个段，操作系统在执行时会认为这个文件不需要动态链接器的支持，因而会直接执行这个文件，最后由于对外部符号的访问是错误的（对外部符号的引用没有正确定位）导致segmentation fault。通常情况下，共享对象文件编译时是不会生成.interp段的，只有可执行文件在使用了共享库的情况下才会生成这个段。下面我就来讲讲如何在共享对象文件中生成这个段。
	</li>
</ol>
<p>
	最好用一个简单的例子来讲解这2个问题如何解决。示例代码如下：
</p>
<pre class="borderindent">#include &lt;stdio.h&gt; // for printf()
#include  &lt;stdlib.h&gt;  // for exit()
void fun()
{
    printf(&quot;This is fun./n&quot;);
    exit(0);
}</pre>
<p>
	该代码保存在<em>fun.c</em>文件中。
</p>
<p>
	&nbsp;
</p>
<p>
	第一个问题容易解决。要编译成PIC代码，只需要传递<em>gcc</em>选项<em>-fpic</em>即可：
</p>
<pre class="borderindent">$ <kbd>gcc -fpic -shared -Wl,-e,fun -o fun.so fun.c</kbd></pre>
<p>
	其中<tt>-Wl,-e,fun</tt>是通知链接器生成的对象文件的入口地址是<code>fun</code>。执行文件<em>fun.so</em>会得到如下结果：
</p>
<pre class="borderindent">$ <kbd>./fun.so</kbd>
<samp>Segmentation fault (core dumped)</samp></pre>
<p>
	之所以这样是因为在<em>fun.c</em>中调用了C语言库函数<code>printf()</code>，但没有对这个外部符号正确地重定位（由于没有.interp段，操作系统认为这个文件不需要动态链接库重定位），因而引用了非法地址，所以产生了段错误。通过下面的命令可以查看<em>fun.so</em>文件没有.interp段。
</p>
<pre class="borderindent">$ <kbd>readelf -l ./fun.so | grep interp</kbd>
$</pre>
<p>
	结果没有输出，说明<em>fun.so</em>文件中确实不存在.interp段。
</p>
<p>
	&nbsp;
</p>
<p>
	要生成.interp段，可以在某个源文件中加入下面一句：
</p>
<pre class="borderindent">const char __invoke_dynamic_linker__[] __attribute__ ((section (&quot;.interp&quot;))) 
    = RUNTIME_LINKER;</pre>
<p>
	这正是<em>glibc</em>的做法。这句代码在<em>glibc</em>的<em>elf/interp.c</em>文件中。    这也是为什么<em>glibc</em>库函数有.interp段的原因。RUNTIME_LINKER就是动态链接库的名字，取决于目标机器。我们也可以用这种方式来解决这个问题，代码如下：
</p>
<pre class="borderindent">#include &lt;stdio.h&gt;    // for printf()
#include &lt;stdlib.h&gt;   // for exit()
const char __invoke_dynamic_linker[] __attribute__ ((section (&quot;.interp&quot;))) 
    = &quot;/lib/ld-linux.so.2&quot;;
void fun()
{
    printf(&quot;This is fun./n&quot;);
    exit(0);
}</pre>
<p>
	注意我用<q>/lib/ld-linux.so.2</q>替代了RUNTIME_LINKER，因为它就是linux上的动态链接器，在<em>/lib</em>目录下。
</p>
<p>
	&nbsp;
</p>
<p>
	用如下方式编译并执行：
</p>
<pre class="borderindent">$ <kbd>gcc -fpic -shared -o fun.so -Wl,-e,fun fun.c</kbd>
$ <kbd>./fun.so</kbd></pre>
<p>
	终于大功告成。
</p>
<h3>
	参考文献
</h3>
<p>
	本文方法来  自<a href="http://sourceware.org/ml/binutils/2008-06/msg00161.html" target="_blank">这个帖子的回帖</a>。
</p>
<hr />
<p>
	<em>Updated: 2011-03-04 17:48</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2012-02-02 22:55:50</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:55:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%94%9f%e6%88%90%e5%8f%af%e6%89%a7%e8%a1%8c%e7%9a%84%e5%85%b1%e4%ba%ab%e5%ba%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1331693488]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>FTP的主动和被动模式</title>
		<link>http://spockwang.blogcn.com/articles/ftp%e7%9a%84%e4%b8%bb%e5%8a%a8%e5%92%8c%e8%a2%ab%e5%8a%a8%e6%a8%a1%e5%bc%8f.html</link>
		<pubDate>Thu, 02 Feb 2012 14:56:45 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Network]]></category>

		<category domain="category" nicename="network"><![CDATA[Network]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
	FTP是仅基于TCP的服务，不支持UDP。与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）。通常来说这两个端口是21（命令端口）和20（数据端口）。但FTP工作方式的不同，数据端口并不总是20。这就是主动与被动FTP的最大不同之处。
</p>
<h2>
	1. 主动FTP
</h2>
<p>
	主动方式的FTP是这样的：客户端从一个任意的非特权端口N（N&gt;1024）连接到FTP服务器的命令端口，也就是21端口。然后客户端开始监听端口N+1，并发送FTP命令“PORT N+1”到FTP服务器。接着服务器会从它自己的数据端口（20）连接到客户端指定的数据端口（N+1）。
</p>
<p>
	针对FTP服务器前面的防火墙来说，必须允许以下通讯才能支持主动方式FTP：
</p>
<ol>
	<li>
		任何大于1024的端口到FTP服务器的21端口。（客户端初始化的连接）；
	</li>
	<li>
		FTP服务器的21端口到大于1024的端口。 （服务器响应客户端的控制端口）；
	</li>
	<li>
		FTP服务器的20端口到大于1024的端口。（服务器端初始化数据连接到客户端的数据端口）；
	</li>
	<li>
		大于1024的端口到FTP服务器的20端口（客户端发送ACK响应到服务器的数据端口）。
	</li>
</ol>
<h2>
	2. 被动FTP
</h2>
<p>
	为了解决服务器发起到客户的连接的问题，人们开发了一种不同的FTP连接方式。这就是所谓的被动方式，或者叫做PASSIVE，当客户端通知服务器它处于被动模式时才启用。在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题。当开启一个FTP连接时，客户端打开两个任意的非特权本地端口（N &gt; 1024和N+1）。第一个端口连接服务器的21端口，但与主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口，而是提交PASV命令。这样做的结果是服务器会开启一个任意的非特权端口（P &gt; 1024），并发送PORT P命令给
</p>
<p>
	客户端。然后客户端发起从本地端口N+1到服务器的端口P的连接用来传送数据。对于服务器端的防火墙来说，必须允许下面的通讯才能支持被动方式的FTP:
</p>
<ol>
	<li>
		从任何大于1024的端口到服务器的21端口（客户端初始化的连接） ；
	</li>
	<li>
		服务器的21 端口到任何大于1024的端口（服务器响应到客户端的控制端口的连接） ；
	</li>
	<li>
		从任何大于1024端口到服务器的大于1024端口（客户端初始化数据连接到服务器指定的任意端口）；
	</li>
	<li>
		服务器的大于1024端口到远程的大于1024的端口（服务器发送ACK响应和数据到客户端的数据端口）。
	</li>
</ol>
<p>
	以上关于主动和被动FTP的解释，可以简单概括为以下两点：
</p>
<ol>
	<li>
		主动FTP：<br />
		命令连接：客户端 &gt;1024端口 --&gt; 服务器 21端口<br />
		数据连接：客户端 &gt;1024端口 &lt;-- 服务器 20端口&nbsp;
	</li>
	<li>
		被动FTP：<br />
		命令连接：客户端 &gt;1024端口 -&gt; 服务器 21端口<br />
		数据连接：客户端 &gt;1024端口 -&gt; 服务器 &gt;1024端口
	</li>
</ol>
<h2>
	3. 主动与被动FTP优缺点
</h2>
<p>
	主动FTP对FTP服务器的管理有利，但对客户端的管理不利。因为 FTP服务器企图与客户端的高位随机端口建立连接，而这个端口很有可能被客户端的防火墙阻塞掉。被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2012-02-03 06:56:45</wp:post_date>
		<wp:post_date_gmt>2012-02-02 14:56:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ftp%e7%9a%84%e4%b8%bb%e5%8a%a8%e5%92%8c%e8%a2%ab%e5%8a%a8%e6%a8%a1%e5%bc%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194624]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>TCP FAQ</title>
		<link>http://spockwang.blogcn.com/articles/tcp-faq.html</link>
		<pubDate>Thu, 02 Feb 2012 22:57:36 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Network]]></category>

		<category domain="category" nicename="network"><![CDATA[Network]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>
	什么是MSS(Maximum Segment Size)?
</h2>
<p>
	TCP用MSS选项允许接收方指定它可以接收的最大段长度。传输的双方通过这个选项协商出一个上方都接受的最大段长。这个值太大或太小都不好。太小使得每次传输的净荷数据太少，带宽使用率不高。太大会使得IP帧太大。这样的帧碰到具有较小的MTU的网络时不得不分片。这些片段中只要有一个超时都会导致整个帧重传。重传的概率随片段的增加而增加。MSS最好等于路径MTU（path MTU）。
</p>
<h2>
	初始序列号（ISN）如何选择？
</h2>
<p>
	The protocol places no restriction on a particular connection being  used over and over again.  A connection is defined by a pair of  sockets.  New instances of a connection will be referred to as  incarnations of the connection.  The problem that arises from this is  -- &quot;how does the TCP identify duplicate segments from previous  incarnations of the connection?&quot;  This problem becomes apparent if the  connection is being opened and closed in quick succession, or if the  connection breaks with loss of memory and is then reestablished.
</p>
<p>
	To avoid confusion we must prevent segments from one incarnation of a  connection from being used while the same sequence numbers may still  be present in the network from an earlier incarnation.  We want to  assure this, even if a TCP crashes and loses all knowledge of the  sequence numbers it has been using.  When new connections are created,  an initial sequence number (ISN) generator is employed which selects a  new 32 bit ISN.  The generator is bound to a (possibly fictitious) 32  bit clock whose low order bit is incremented roughly every 4  microseconds.  Thus, the ISN cycles approximately every 4.55 hours.  Since we assume that segments will stay in the network no more than  the Maximum Segment Lifetime (MSL) and that the MSL is less than 4.55  hours we can reasonably assume that ISN's will be unique.
</p>
<p>
	See p. 26 of [RFC793].
</p>
<h2>
	为什么要有TIME_WAIT状态？
</h2>
<p>
	<img src="http://hi.csdn.net/attachment/201010/4/8296249_1286195408YVg3.jpg" alt="TIME_WAIT状态" width="544" height="247" />
</p>
<p>
	有两个原因：
</p>
<ol>
	<li>
		可靠地关闭TCP连接。<br />
		考虑一下，若最后一个ACK帧丢失了，B会超时重传。A必须记住这个状态信息，以重传最后的ACK。若A没有这个状态信息，它会传送RST。这会被B解释为一个错误。若TCP要干净地关闭连接，它就必须正确地处理最后四个帧中任意一个帧的丢失。
	</li>
	<li>
		使老的重复帧消失在网络中。<br />
		TIME_WAIT状态的持续时间是MSL的2倍。TIME_WAIT状态过后会保证最后2个帧从网络中消失。这样若重新建立这个连接，可以保证上一次连接的老数据不会冒出来干扰这次连接。&nbsp;
	</li>
</ol>
<p>
	见[UNPv13e]的44页。
</p>
<h2>
	如何处理拥塞？
</h2>
<p>
	TCP维护2个窗口：接收方允许的窗口和拥塞窗口。最终允许发送的大小是这两个窗口的较小值。拥塞窗口的大小由慢启动算法计算。它还用了第三个参数，阈值。当新建立一个连接时，拥塞窗口初始化为MSS。每次成功传输成功后，拥塞窗口加MSS。第一次传输一个数据段，成功后拥塞窗口增加为2个MSS。然后发送两个数据段，若这两个都成功了，拥塞窗口增加为4个MSS。实际上，每批被确认的数据都使拥塞窗口加倍。不过，当增加到阈值时便停止。从这个点开始仅线性增加，每一批确认只增加一个MSS。每当有超时时将阈值设为原来的一半，并将拥塞窗口重新设为MSS，重新开始慢启动算法。
</p>
<p>
	见[Tanenbaum]的6.5.9节。
</p>
<h2>
	什么是带外数据（Out of band data）？
</h2>
<p>
	有时候用户需要发送紧急信息给对方，即使对方还没有处理完缓存中的数据或对方的接收允许窗口为0（advertised window of 0）时。例如在远程登录会话中，用户可能会发送中断信号以关闭程序，而这时程序也许正等待输入。该中断信号必须马上发送而不是等待程序执行完毕。这就需要用到带外数据。带外数据主要是用于这种远程交互式程序中，如telnet，ssh等。
</p>
<p>
	当需要发送紧急数据时，TCP可以让发送者将数据标记为紧急的，设置URG code bit和URGENT POINTER。URGENT POINTER指向紧急数据结束的地方，也就是说该点之前的数据为紧急数据。URGENT POINTER前一个字节称为<strong>带外字节</strong>（Out ofband byte，OOB)。接收方一旦收到标有URG的数据段时便通知应用程序进入紧急模式，并在收完紧急数据后通知应用程序进入常规模式。至于如何通知的具体细节取决于操作系统。详情见[UNPv13e]第24章。
</p>
<h2>
	何谓愚笨窗口综合症（Silly Window Syndrome）及如何解决？
</h2>
<p>
	愚笨窗口综合症有2种变现形式：接收方愚笨窗口综合症和发送方愚笨窗口综合症。
</p>
<p>
	考虑以下情形。当接收方的接收缓存满时，它会通知对方它的接收允许窗口为0，使发送方不要再继续发送数据。这时接收应用程序从接收缓存中读入一个字节，那么就空出了一个字节的空间。接收TCP马上告知对方它的接收允许窗口为1。发送方因此发送1字节的数据给接收方。这样，每当接收应用程序读取1字节数据时都会触发发送方发送1字节数据。显然每一个数据段仅携带如此少的用户数据是相当低效的。这就是接收方愚笨窗口综合症。
</p>
<p>
	和接收方一样，发送方也会产生这个问题。如果发送方每次只生成少量的数据，发送TCP就会传输一个携带少量用户数据的数据段。这就是发送方愚笨窗口综合症。
</p>
<p>
	要避免这个问题可以采用很简单的启发式方法。当接收方有少量的可用缓存时，不要急着增加接收允许窗口。同样，当发送方有少量的数据要发送时，也不要急着发送，等到数据足够多时再发送。
</p>
<blockquote>
	<p>
		Receive-side Silly Window Avoidance: Before sending an updated window advertisement after advertising a zero window, wait for space to become available that is either at least 50% of the total buffer size or equal to a maximum sized segment.
	</p>
	<p>
		Send-side Silly Window Avoidance: When a sending application generates additional data to be sent over a connection for which previous data has been transmitted but not acknowledged, place the new data in the output buffer as usual, but do not send additional segments until there is sufficient data to fill a maximum-sized segment. &nbsp;If still waiting to send when an acknowledgement arrives, send all data that has accumulated in the buffer. &nbsp;Apply the rule even when the user requests a push operation.
	</p>
</blockquote>
<p>
	发送方愚笨窗口综合症避免算法又称为<strong>Nagle算法</strong>。它非常优美简洁，而且是自适应的。它延迟发送的时间取决于网络的当前性能，因此能自适应于慢速的和快速的网络。另见[Comer]的12.32，12.33。
</p>
<p>
	当然有时候这个算法是我们所不希望的。在远程交互式程序中，用户希望每敲入一个字符都能立即发送到服务器上去，而不是等待这个字符被确认后才能发送下一个字符。可以通过一个TCP选项禁用Nagle算法。详情见[UNPv13e]的7.9节。
</p>
<h2>
	参考文献
</h2>
<ul>
	<li>
		[RFC793] <em>Transmission Control Protocol</em>.
	</li>
	<li>
		[Comer] Douglas E. Comer. &nbsp;<em><q>Internetworking with TCP/IP, Vol. 1</q></em>, Fifth Edition.
	</li>
	<li>
		[UNPv13e]&nbsp;Richard Stevens, Bill Fenner and Andrew M. Rudoff.&nbsp;<em><q>UNIX Network Programming</q></em>, Vol. 1, Third Edition.
	</li>
	<li>
		[Tanenbaum] Andrew S. Tanenbaum. &nbsp;<em><q>Compuer Networks</q></em>, Fourth Edition.
	</li>
</ul>
<hr />
<p>
	<em>Updated: 2011-03-04 18:01:02</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2012-02-03 14:57:36</wp:post_date>
		<wp:post_date_gmt>2012-02-02 22:57:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tcp-faq</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194662]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>TCP协议浅析</title>
		<link>http://spockwang.blogcn.com/articles/tcp%e5%8d%8f%e8%ae%ae%e6%b5%85%e6%9e%90.html</link>
		<pubDate>Thu, 02 Feb 2012 22:58:25 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Network]]></category>

		<category domain="category" nicename="network"><![CDATA[Network]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>
	1. 简介
</h2>
<p>
应用程序通常都需要从一个主机传送大量的数据到另一个主机。采用不可靠的传输机制会使程序变得异常复杂和困难，因为程序需要检测传输错误和重传丢失的数据等。因此迫切地需要一种能解决可靠性传输问题的通用机制，这就是TCP诞生的目的。有了这样一个协议就使得应用程序无需考虑网络的各种细节。
</p>
<p>
	TCP建立在无连接的、不可靠的IP协议基础之上，为达到它的目的，必须解决以下几个问题：
</p>
<ol>
	<li>
		<strong>可靠性</strong>：若数据丢失或出错怎么办。
	</li>
	<li>
		<strong>按序到达</strong>：由于IP协议传输每一帧数据时可能选择不同的路径，因此到达目标机的时间不一样。后发送的数据可能比先发送的数据先到达目标机。那么目标机如何保证组装的数据的顺序是正确的呢？
	</li>
	<li>
		<strong>流控制</strong>：如果源机器比目标机处理数据的速度快，那么如何保证快速的发送方不会淹没慢速的接收方？
	</li>
	<li>
		<strong>拥塞控制</strong>：流控制解决的是端到端（end-to-end）的传输问题，但是TCP是通过网络传输数据的，这里涉及到发送方与网络的交互问题。如果发送方发送太多的数据使得网络疲于处理，将使得网络的吞吐量极具下降，最终使网络瘫痪。TCP必须考虑到这一问题。
	</li>
</ol>
<p>
	本文将逐一介绍TCP是如何解决这些问题的。
</p>
<h2>
	2. 提供可靠性
</h2>
<p>
	“如何在不可靠的传输系统上提供可靠的传输呢？”大多数可靠的协议都用一个很简单的技术来解决这个问题：确认和重传。它要求接收方每收到一个消息后都向发送方发送一个确认消息。发送方记下每一个发出去的消息，在发出下一消息之前等待确认。发送方每次发送消息时还要启动一个定时器，如果此定时器超时而确认没有收到就重新发送刚才的消息。这就是<strong>停等协议</strong>（Stop-and-Wait Protocol）。
</p>
<p>
	数据的丢失问题解决了，但是这个协议没有解决重复的数据。不可靠的传输技术会重复发送数据。高延迟的网络导致过早的重传也会产生重复的数据。TCP为每一个传输的字节分配一个<strong>序列号</strong>解决了这个问题。每一个确认帧也有序列号，以表明它是对哪一个帧的确认。另外，序列号还可以表示这个数据的顺序，接收方可根据序列号重组（reassemble）数据，这样就可以保证数据的顺序是正确的。
</p>
<p>
	停等协议和序列号解决了可靠性和按序到达，但是它的效率太低了。因为每次都要等确认帧回来后才能发送下一帧。若网络的延迟太大会大大降低传输效率。这样就诞生了<strong>滑动窗口算法</strong>（sliding window algorithm）。它是停等协议的更复杂的版本，停等协议只不过是它的一种特殊情况（窗口大小为1）。在滑动窗口算法下，窗口内的帧都可以立即发送，然后每当确认到达后，窗口就向后移动并可以发送更多的帧。滑动窗口算法可以更高效地利用网络带宽，因为它允许发送方在等到确认前发送多个帧。那些已发送出去但还没有确认的帧称为未确认帧。未确认帧的数量取决于窗口的大小。另外值得注意的是，窗口的大小不应超过序列号最大值的一半。（原因见[Tanenbaum]的3.4.3节）。
</p>
<h2>
	3. 可变窗口大小和流控制
</h2>
<p>
	TCP的滑动窗口与之前提到的版本的区别就是在TCP中这个窗口大小是可变的。TCP发送方和接收方都有窗口。接收方的窗口大小可理解成可以接收的数据量，也就是接收缓存大小。接收方在每一个帧中都会告诉发送方这个缓存的大小。
</p>
<p>
	可变窗口不仅可以解决可靠性问题，还可以解决流控制问题。接收方若缓存不够用，为了避免接收更多的数据，它可以减小接收窗口的大小。在极端情况下，它可以将接收窗口设为0以停止接收数据。稍后，若接收方的可用缓存变大，它可将接收窗口增加以触发发送发发送数据。
</p>
<h2>
	4. 拥塞控制
</h2>
<p>
	拥塞控制与流控制是不同的概念。流控制是处理发送方和接收方交互的问题，而拥塞控制涉及的是发送方和网络的交互问题。
</p>
<p>
	通信的主机可以通过接收窗口知道对方是否可以接收帧以及接收多少帧，但通常不知道哪里发送了拥塞以及为什么发送拥塞。对它们来讲，拥塞仅意味着延迟变长。这样确认超时导致重传。重传使得拥塞变得更严重。最终会使得网络完全崩溃，不能传输任何数据。
</p>
<p>
	为了避免拥塞，TCP采用两个技术实现：<strong>slow-start（慢启动）</strong>和<strong>multiplicative decrease</strong>，并引入<strong>拥塞窗口</strong>（congestion window）的概念，用于限制发送窗口的大小。也就是说，发送窗口的大小是接收窗口和拥塞窗口的较小值。
</p>
<blockquote>
	<p>
		慢启动算法：当建立连接后初次发送数据或拥塞解除后，拥塞窗口初始为1，然后每当及时收到确认时加1。
	</p>
	<p>
		Multiplicative Decrease：每当丢失一个帧时（没有及时收到确认），拥塞窗口减小一半。
	</p>
</blockquote>
<h2>
	参考文献
</h2>
<ul>
	<li>[Comer] Douglas E. Comer. &nbsp;<i>Internetworking with TCP/IP</i>, Volume 1, Fifth Edition. </li>
	<li>[Tanenbaum] <i>Computer Networks</i>, Fourth Edition.</li> 
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2012-02-03 14:58:25</wp:post_date>
		<wp:post_date_gmt>2012-02-02 22:58:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tcp%e5%8d%8f%e8%ae%ae%e6%b5%85%e6%9e%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194713]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>C++的new和delete运算符与内存分配函数和释放函数</title>
		<link>http://spockwang.blogcn.com/articles/c%e7%9a%84new%e5%92%8cdelete%e8%bf%90%e7%ae%97%e7%ac%a6%e4%b8%8e%e5%86%85%e5%ad%98%e5%88%86%e9%85%8d%e5%87%bd%e6%95%b0%e5%92%8c%e9%87%8a%e6%94%be%e5%87%bd%e6%95%b0.html</link>
		<pubDate>Fri, 03 Feb 2012 06:48:22 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Administration]]></category>

		<category domain="category" nicename="administration"><![CDATA[Administration]]></category>

		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
	我曾经碰到下面一段代码：
</p>
<pre class="borderindent">int *p = new (sizeof(int));</pre>
<p>
	编译通不过，提示说是new运算符语法错误。但若换成如下：
</p>
<pre class="borderindent">int *p = operator new (sizeof(int));</pre>
<p>
	编译顺利通过。一时不得其解。前一句代码显然是调用new运算符；后一句看起来也像是调用new运算符，毕竟其它运算符可以这样调用。
</p>
<p>
	在仔细查看了C++标准后，我才发现这两句代码实际上是不一样的。前一句是调用new运算符，但后一句是直接调用内存分配函数。本文就是要澄清这两者之间的区别。
</p>
<p>
	new运算符有两步操作：
</p>
<ul>
	<li>
		调用适当的内存分配函数分配内存<code>opeator new</code>或<code>operator new[]</code>；
	</li>
	<li>
		调用适当的构造函数。
	</li>
</ul>
<p>
	同样地，<code>delete</code>运算符也有两步操作：
</p>
<ul>
	<li>
		调用适当的析构函数；
	</li>
	<li>
		调用适当的内存释放函数<code>operator delete</code>或<code>operator delete[]</code>.
	</li>
</ul>
<p>
	C++标准库在头文件<code>&lt;new&gt;</code>中提供了一些默认的内存分配函数和释放函数，包括会抛出异常的和不抛出异常的版本（见[ISO C++ 1998]的18.4）。严格地来讲，<code>new</code>和<code>delete</code>运算符是不能被重载的，重载的只是内存分配函数和释放函数。因此，用户可以自定义内存分配函数和释放函数。注意，内存分配函数和释放函数必须是全局函数（非静态的）或类的成员函数（3.7.3.1, [ISO C++ 1998])。
</p>
<h2>内存分配释放函数</h2>
<p>
内存分配函数的返回值类型为<code>void *</code>，第一个参数的类型为<code>size_t</code>，可以有多个参数。内存分配函数分通常(usual)形式和放置(placement)形式。只有一个参数的分配函数为通常形式，有多个参数的为放置形式。
</p>
<p>
内存释放函数的返回值类型为<code>void</code>，第一个参数的类型为<code>void *</code>，可以有多个参数。内存释放函数也分通常形式和放置形式。对于全局的内存释放函数，只有一个参数的内存释放函数为通常形式，有多个参数的为放置形式。对于类的成员内存释放函数，若声明了一个单参数的内存释放函数，则它是通常形式，其它的都为放置形式；若没有声明这样一个函数，但是声明了一个两个参数的内存释放函数且第二个参数类型为<code>size_t</code>，则它可以作为通常形式的替代品，但它仍是放置形式。(clause 2 of 3.7.3.2, [ISO C++ 1998])
</p>
<p>
C++标准库提供了8个内存分配和释放函数，我们也可以用同样的函数签名定义这些函数以替代它们。(clause 2 of 17.4.3.4, [ISO C++ 1998])
</p>
<h2>
	new和delete运算符及对应的内存分配和释放函数
</h2>
<p>
对于每一个<code>new</code>运算符，编译器都要找到并调用相应的内存分配函数。若<code>new</code>前面有全局作用域解析符或要分配的类型不是类类型，则仅在全局作用域查找内存分配函数；否则，先在要分配的类型的类作用域里查找，若找不到再在全局作用域里查找。(clause 9 of 5.3.4, [ISO C++ 1998])
</p>
<p>
非放置形式的<code>new</code>表达式调用通常形式的内存分配函数，放置形式的<code>new</code>表达式调用放置形式的内存分配函数。对于非放置形式的<code>new<code>表达式，调用的内存分配函数的第一个参数是要分配内存的大小。若是放置形式(placement forms)的<code>new</code>表达式，<code>new</code>运算符的放置部分将作为内存分配函数的第二个及后续参数。
<pre>
T *p = new T;        // call operator new(sizeof(T)) or T::operator new(sizeof(T))
T *p = new T[5];     // call operator new[](sizeof(T)+delta) or T::operator new[](sizeof(T)+delta)
T *p = new (2, f) T; // call operator new(sizeof(T), 2, f) or T::operator new(sizeof(T), 2, f)
</pre>
</p>
<p>
对于每一个<code>delete</code>表达式，编译器都要找到并调用相应的内存释放函数。若<code>delete</code>前面有全局作用域解析符(<code>::</code>)或要释放的类型不是类类型，则仅在全局作用域查找内存释放函数；否则，先在要释放的类型（注意是其动态类型，而不是静态类型）的类作用域里查找，若找不到再在全局作用域里查找。(clause 9 of 5.3.4, [ISO C++ 1998])
</p>
<p>
非放置形式的<code>delete</code>表达式调用非放置形式的内存释放函数。<code>delete</code>表达式没有放置形式。<code>delete</code>运算符调用的内存释放函数传给内存释放函数的第一个参数是将要释放的内存指针。若调用的内存释放函数是类的成员函数且是两参数风格（有两个参数，第一个参数是<code>void *</code>，第二个参数类型是<code>size_t</code>，没有声明单参数的内存释放函数，所以这个函数是通常形式），则内存的大小作为第二个参数(clause 5 of 12.5, [ISO C++ 1998])。
<pre>
delete p;    // call operator delete(p) or T::operator delete(p) or T::operator delete(p, sizeof(*p))
delete[] p;  // call operator delete[](p) or T::operator delete[](p) or T::operator delete[](p, sizeof(*p)*s+delta)
</pre>
</p>
<p>
	若释放的对象不是数组，则<code>delete</code>的操作数的动态类型与静态类型要么一致，要么其析构函数是虚拟的；若释放的对象是数组，则delete[]操作数的动态类型与静态类型必须一致。（clause 3 of 5.3.5, [ISO C++ 1998])
</p>
<p>
	  内存释放函数虽然是静态的，不能动态绑定，但是若类T的析构函数是虚拟的则编译器将根据指针T *p的动态类型来决定调用合适的内存释放函数(clause 7 of 12.5, [ISO C++ 1998])。例如：
</p>
<pre class="borderindent">struct B {
    virtual ~B();
    void operator delete(void *);
};
struct D : B {
    void operator delete(void *);
};
void f()
{
    B *bp = new D;
    delete bp;         // use D::operator delete(void *), not B::operator delete(void *)
}
</pre>
<p>
	  若<code>new</code>运算符在初始化对象时抛出异常并且存在与<code>operator new</code>匹配的内存释放函数，那么这个内存释放函数将被调用以释放内存，异常在<code>new</code>表达式的环境下继续传播。非放置形式的内存释放函数与非放置形式的内存分配函数是匹配的；放置形式的内存释放函数与放置形式的内存分配函数，若它们的第二个及后续参数一致，则是匹配的。在调用内存释放函数时，内存分配函数的返回值传给内存释放函数的第一个参数；若调用的是放置形式的内存释放函数，则将调用放置形式的内存分配函数时传递的额外参数传递给内存释放函数。
<pre>
class A {
public:
    A()
    {
        throw runtime_error("error");
    }
    // 放置形式的内存释放函数，也可作为通常形式的替代品，因为单参数的内存释放函数不存在。
    void operator delete(void *p, size_t s) 
    {
        cout &lt;&lt; &quot;A::operator delete/n&quot;;
    }
};
  
int main()
{
    try {
        A *p = new A;         // 抛出异常！调用A::operator delete()
    } catch (const exception& e) {
       cout << e.what() << endl;
    }
    return 0;
}
</pre>
</p>
<p>
	由于A的构造函数会抛出异常，而且A定义了一个与<code>operator new(size_t)</code>匹配的内存释放函数，因此编译器将调用那个内存释放函数然后抛出异常。
</p>
<h2>
	References
</h2>
<ul>
	<li>
		[ISO C++ 1998] ISO C++ Standard, 1998.
	</li>
</ul>
<p>
<hr />
<em>Updated: 2011-04-03 16:38</em>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2012-02-03 22:48:22</wp:post_date>
		<wp:post_date_gmt>2012-02-03 06:48:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c%e7%9a%84new%e5%92%8cdelete%e8%bf%90%e7%ae%97%e7%ac%a6%e4%b8%8e%e5%86%85%e5%ad%98%e5%88%86%e9%85%8d%e5%87%bd%e6%95%b0%e5%92%8c%e9%87%8a%e6%94%be%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194102]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>数据对齐</title>
		<link>http://spockwang.blogcn.com/articles/%e6%95%b0%e6%8d%ae%e5%af%b9%e9%bd%90.html</link>
		<pubDate>Fri, 03 Feb 2012 06:52:07 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>
	为什么要数据对齐？
</h2>
<p>
	所谓数据对齐是指访问数据的地址要满足一定的条件，能被这个数据的长度所整除。例如，1字节数据已经是对齐的，2字节的数据的地址要被2整除，4字节的数据地址要被4整除。
</p>
<p>
	但为什么要数据对齐呢？简单地说，数据对齐是为了读取数据的效率。假如说每一次读取数据时都是一个字节一个字节读取，那就不需要对齐了，这跟读一个字节没有什么区别，就是多读几次。但是这样读取数据效率不高。为了提高读取数据的带宽，现代存储系统都采用许多并行的存储芯片来提高读取效率。以自然字长为4个字节的机器为例。
</p>
<pre class="borderindent">memory chip     0       1       2       3
offset
  
  0             0       1       2       3
  1             4       5       6       7
  2             8       9      10      11
  N            4N    4N+1    4N+2    4N+3
</pre>
<p>
	如上图所示，地址0-3的4字节数据都存储在4个不同的芯片上。CPU的bits 0-7连上芯片0，bits 8-15连上芯片1，bits 16-23连上芯片2，bits 24-31连上芯片4。
</p>
<p>
	如果从地址0读取4字节数据，4个存储芯片都从各自的地址0读出数据，而且位置也是正确的。这4个字节的读取可以并行地进行，因此带宽是一次读取一个字节的4倍。
</p>
<p>
	假如要从地址1读取4字节数据会发生什么呢？首先，读取的数据位置不正确。从芯片1读取的数据应该放在bits 0-7，它却对应CPU的bits 8-15。从芯片2，3，0读取的数据也是一样。这并不是什么大问题，CPU可以把读入的数据循环左移8比特来把它们放置在正确的位置上。问题在于，这一次发给4个芯片的地址不一样，给芯片1，2和3的地址是0，给芯片0的地址是1。也就是说给每一个芯片的地址都不一样，这就需要多根地址总线。32位的CPU就需要4个地址总线，每个地址总线需要用到CPU的至少32个引脚，也就是必须要100多根引脚。而通常32位的CPU也就400多个引脚。这当然会增加CPU与内存接口的复杂性（也可能会有其它的方案解决这个问题，但最终都会使接口变得更复杂，还可能会降低效率）。但是增加这个复杂性是不值得。由于大多数数据访问都可以做成对齐的（编译器通常会使数据对齐），因此为了使极少数的不对奇访问速度更快而使CPU与内存的接口变的更复杂，是不划算的。
</p>
<p>
	在这样的设计下，访问没有对齐的数据需要2次访问。比如，访问地址1, 2, 3, 4的4字节数据，先读取地址0-3的数据，再读取地址4-7的数据，再把地址1-5的数据取出来放到目的寄存器中。相应地，这增加了CPU内部的复杂性。这就解释了为什么不对齐的数据要多次访问内存，速度不如访问对齐的数据快。而且也解释了为什么原子类型的数据必须要对齐。有的CPU，例如Motorala生产的一些CPU，还有IBM的PowerPC，为了消除这个复杂性，干脆禁止访问不对奇地址（若访问不对奇地址时将产生异常）。
</p>
<p>
	总结一下为什么需要数据对齐。为了增加CPU读取数据的带宽，内存系统通常都采用并行结构使得可以并行传输数据。这样的并行结构使得访问对齐的数据速度快，但是若要使访问不对奇的数据也一样快会使CPU与内存系统的接口变得更复杂，而这是划不来的。经过权衡之后，最终的结果是：访问对齐的数据速度快，访问不对奇的数据速度慢（需要2次访问）或干脆禁止访问不对奇数据。
</p>
<p>
	关于访问对齐数据和不对齐数据的速度差异请看<a href="http://www.ibm.com/developerworks/library/pa-dalign/" target="_blank">这里</a>。关于为什么使访问不对齐数据需要多次访问请看<a href="http://stackoverflow.com/q/3903164/471846" target="_blank">这里</a>。关于哪些CPU禁止访问不对奇数据以及在这些CPU上如何解决访问不对齐数据的问题请看<a href="http://en.wikipedia.org/wiki/Data_structure_alignment" target="_blank">这里</a>。
</p>
<h2>
	Visual C++的结构体对齐规则
</h2>
<p>
	MSDN对Visual C++的结构体对齐规则有<a href="http://msdn.microsoft.com/zh-cn/library/hx1b6kkd.aspx" target="_blank">简单介绍</a>，现摘录如下：
</p>
<blockquote>
	<p>
		Structure members are stored sequentially in the order in which they are declared: the first member has the lowest memory address and the last member the highest.
	</p>
	<p>
		Every data object has an alignment-requirement. The alignment-requirement for all data except structures, unions, and arrays is either the size of the object or the current packing size (specified with either /Zp or the pack pragma, whichever is less). For structures, unions, and arrays, the alignment-requirement is the largest alignment-requirement of its members. Every object is allocated an offset so that
	</p>
	<p>
		offset %  alignment-requirement == 0
	</p>
	<p>
		Adjacent bit fields are packed into the same 1-, 2-, or 4-byte allocation unit if the integral types are the same size and if the next bit field fits into the current allocation unit without crossing the boundary imposed by the common alignment requirements of the bit fields.
	</p>
</blockquote>
<p>
	每一个数据对象都有一个对齐限制，通常称为<strong>对齐模数</strong>。对于基本类型（不包括结构体，联合体和数组）不同的数据类型的对齐模数通常等于这个数据类型的大小，比如<code>char</code>的对齐模数为1，<code>short</code>的对齐模数为2，<code>int</code>的对齐模数为4，<code>float</code>的对齐模数是4，<code>double</code>的对齐模数为8。当然，这个对齐模数每一个编译器可能有差异，并且可以设置。在Visual C++中可以通过<tt>/Zp</tt>选项或<code>#pragma</code>设置。综合起来，基本类型的对齐模数是这个类型的大小和设置的对齐限制的较小者。对于结构体，联合体和数组，对齐模数是它的成员的对齐模数的最大值。
</p>
<p>
	现举几个例子说明一下。（下面例子都在Visual C++ 2008 Express Edition上测试过。）
</p>
<pre class="borderindent">struct A {
    char c;
    int i;
};</pre>
<p>
	<code>c</code>的对齐模数是1，<code>i</code>的对齐模数是4，因此结构体<code>A</code>的对齐模数为4。<code>c</code>本身占用1个字节，由于<code>i</code>的对齐模数为4，因此<code>c</code>后面填充3个字节以使<code>i</code>的起始地址对齐。这样加起来是8个字节，<code>A</code>已经对齐了，后面不用再填充了，因此<code>A<code>占用8个字节。</code></code>
</p>
<p>
	另一个例子。
<pre class="borderindent">struct A {
    char c;
    int i;
    char d;
};</pre>
跟上面一样，<code>c</code>的对齐模数是1，<code>i</code>的对齐模数是4，<code>d</code>的对齐模数是1，因此结构体<code>A</code>的对齐模数为4。<code>c</code>占用1字节，为使<code>i</code>对齐，<code>c</code>后面要填充3个字节，因此<code>c<code>和<code>i<code>占用8个字节。<code>d</code>占用1个字节，这样一共占用9个字节，但是<code>A</code>的对齐模数是4，因此<code>d</code>后面要填充4字节。因此<code>A<code>占用12字节。
</p>
<p>
	对于比特域来讲，上面的规则要稍稍修改一下。对于连续的声明类型大小相同的比特域来讲，如果它们申请的宽度加起来不超过它们声明的类型大小，那么它们可以压缩在一个分配单元中。对于声明类型大小不同的比特与来讲，它们分配在不同的分配单元中。
</p>
<pre class="borderindent">struct A {
    char a : 3;
    char b : 5;
};</pre>
<p>
	<code>a</code>和<code>b</code>的类型长度都为1字节，因此可以考虑合并。它们加起来为8比特，可以放在一个字节中，由于<code>A</code>的对齐模数为1，因此不需在后面再填充数据，所以<code>A</code>的大小为1字节。
</p>
<p>
	另一个例子.
</p>
<pre class="borderindent">struct A {
    char a : 4;
    char b : 5;
};</pre>
<code>a</code>和<code>b</code>的类型长度都为1字节，因此可以考虑合并，但跟上例不同的是，它们无法放入一个字节中（加起来为9比特），因此它们要放在各自的分配单元中，<code>a</code>和<code>b</code>之间有4比特的空隙。<code>A</code>的大小为2字节。
<p>
	再考虑如下例子.
</p>
<pre class="borderindent">struct A {
    char a : 3;
    int b : 2;
    char c : 2;
};</pre>
<code>a</code>和<code>b</code>的类型长度不相等（<code>a</code>的为1字节，<code>b</code>的为4字节），因此不能合并，同样<code>b</code>和<code>c</code>也不能合并。因此，<code>a</code>单独占用1字节，后面填充3字节以使<code>b</code>对齐，<code>b</code>占用4字节，<code>c</code>占用1字节。由于<code>A</code>的对齐模数是4字节，所以<code>c</code>后面要填充3字节，<code>A</code>的大小为12字节。
<p>
	下面再考虑匿名比特域的例子。匿名比特域主要目的是在两个比特域之间加入一段空隙。
</p>
<pre class="borderindent">struct A {
    char a : 2;
    char   : 2;
    char b : 2;
};</pre>
匿名比特域对对齐规则没有影响，它唯一的不同是无法引用这个域。由于这3个域的类    型大小是一样的，且可以放在一个字节之中，因此可以合并，<code>A</code>的大小为1字节。
<p>
	下面再考虑匿名比特域宽度为0的，它的作用是使它后面的比特域对齐到下个比特域的对齐模数上，也就是说，不允许它跟上一个比特域合并。
</p>
<pre class="borderindent">struct A {
    char a : 2;
    char   : 0;
    char b : 2;
};</pre>
尽管这三个比特域的类型一样，但是由于<code>a</code>和<code>b</code>之间有一个宽度为0的匿名比特域，因此    它们不能合并。<code>a</code>和<code>b</code>个占用1个字节，所以<code>A</code>的大小为2字节。
<p>
	最后，对于具有普通成员和比特域的结构体，它们的对齐规则跟上面的一样。注意，普  通成员与比特域不能合并，只有连续的比特域之间可以考虑合并，每一个成员都要对  齐到自己的对齐模数上。
</p>
<hr />
<em>Updated: 2011-03-04 17:31</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2012-02-03 22:52:07</wp:post_date>
		<wp:post_date_gmt>2012-02-03 06:52:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%95%b0%e6%8d%ae%e5%af%b9%e9%bd%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1328194338]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>服务器程序开发实践</title>
		<link>http://spockwang.blogcn.com/articles/%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%ae%9e%e8%b7%b5.html</link>
		<pubDate>Sun, 05 Feb 2012 08:50:34 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/articles/%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%ae%9e%e8%b7%b5.html</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>如何打印日志</h2>
<p>
按打印日志的目的，日志可分为两大类：功能日志和调试日志。功能日志是程序的需求要求打印的，一般是为了统计之用，格式固定并指定了打印的目的地，这里略去不讨论。调试日志是为了调试程序bug打印的。
</p>
<p>
既然调试日志是为了调试之用，为了弄清楚需要打印什么信息，我们先了解一下调试需要哪些信息。
</p>
<p>
当我们看到一条错误日志时我们迫切需要知道的是这一条日志是哪一行代码打印的，所以每一条日志都应该包含这一条日志是哪一个源文件的哪一行代码以及是哪一个函数打印的，就向下面这样：
<pre>
filename.cpp:103: in function foo(): something is wrong
</pre>
</p>
<p>
服务器程序最容易出现问题的地方主要有两个来源：访问其它服务和请求处理耗时。前者出问题主要在于对其它服务的API了解不足导致的，后者主要在于难于准确估计程序每一部分的耗时。为了解决第一个问题，我们可以在访问其它服务时打印一条日志，包括请求和响应信息。这样在出现访问其它服务出现问题时可以及时查出来。这些日志应该打印到一个单独的文件。为了解决第二个问题，我们可以把请求的处理细分为几个过程，打印每一个过程的耗时。这些日志也应该打印到一个单独的文件中。
</p>
<p>
为了及早逮住程序的bug，我们通常都会在代码中加入大量的<code>assert</code>宏。当<code>assert</code>失败时说明程序有bug，这时我们也应该打印一条错误日志。
</p>
<p>
如果程序的目的是为别的程序提供公共的API服务的话，我们还需要打印其它程序访问这个程序的输入和输出信息，以便尽快定位是调用方还是被调方的bug，这样在调用方的开发者询问调用是否正确时我们就不会手足无措了。这个日志也应该打印到单独的文件中。
</p>
<p>
总结一下：
<ul>
  <li>程序运行流程的相关信息以及错误信息（包括<code>assert</code>失败的信息）都打印到一个单独的文件中，以便分析程序自身的bug。</li>
  <li>访问其它服务的请求和响应信息要打印到一个单独的文件中。</li>
  <li>其它程序访问本程序的请求和响应信息打印到一个单独的文件中。</li>
</ul>
</p>
<h2>C++容器开发实践</h2>
<ul>
  <li>每一个Command应该表示一个动作，而不是一个业务。业务应该以查询参数提供。相似的页面应该用同一个command产生。</li>
  <li>如果需要动态产生一个URL访问一个Command，那么这个被访问的Command应该提供一个静态成员函数生成这个URL。这样，产生和解析这个URL的逻辑对外是不可见的，更易维护。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2012-02-06 00:50:34</wp:post_date>
		<wp:post_date_gmt>2012-02-05 08:50:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%a8%8b%e5%ba%8f%e5%bc%80%e5%8f%91%e5%ae%9e%e8%b7%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>C gotchas</title>
		<link>http://spockwang.blogcn.com/articles/cgotchas.html</link>
		<pubDate>Sun, 13 May 2012 15:14:54 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/articles/c-gotchas.html</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
+, - have higher precedence than >>, <<.
</p>
<p>
a/b if a or b is negative, its result is implementation-dependent (truncated to or from 0) prior to C99, and truncated to 0 by C99.  The standard specifies that (a/b)*b + a%b is equal to a.
</p>
<h3>Array name vs. pointer</h3>
<p>
Usually an array name is transformed to be a pointer to the first element of the array.  But in following situations an array name is not equivalent to a pointer to the first element of the array:
<ul>
<li>as an operand of <code>sizeof</code> operator</li>
<li>as an operand of <code>&</code> operator</li>
</ul>
</p>
<p>
The declaration of an array and its definition must be compatible, only except as a parameter of a function, in which the declaration of an array is equivalent to the declaration of a pointer.  Particularly you must not define a variable to be an array in one file and declare it to be a pointer in another file.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2012-05-13 23:14:54</wp:post_date>
		<wp:post_date_gmt>2012-05-13 15:14:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cgotchas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1336922091]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>C++ Gotchas</title>
		<link>http://spockwang.blogcn.com/articles/c-gotchas.html</link>
		<pubDate>Sun, 13 May 2012 15:27:32 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/articles/c-gotchas.html</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Variables, Operators and Conversions</h2>
<p>
Implicit conversions are not applied to non-const reference arguments.  See p.146 of [C++].
</p>
<p>
The distinction between const-reference and non-const reference parameters is that the former matches constants and const variables while the latter matches others in overloading resolution.  Const-reference can bind temporary objects but non-const reference can not.
</p>
<p>
Not like C, consts have internal linkage by default.  However, you can use extern to give it external linkage.  See bottom of p.199 of [C++].
</p>
<p>
There are four kinds of cast in C++: static_cast, dynamic_cast, const_cast, and reinterpret_cast.
</p>
<h3>Initialization</h3>
<p>
The global objects and class static member objects are constructed according to their order of definition (section 9.4.1 of [C++]).  The local static objects are constructed when accessed the first time (See section 7.1.2 of [C++]).  They are destructed in the reverse order.  An array of class objects are initialized by calling corresponding constructors for each of its elements, following the subscript order (clause 3 of 12.6 of [ISO C++ 1998]).
</p>
<p>
The objects with static storage duration is first zero-initialized (Section 8.5 of [ISO C++ 1998]) and then initialized by calling appropriate constructors.  Local non-static objects which are class type are initialized by calling appropriate constructors (call default constructors if no initializers).  Local non-static objects which are built-in types have indeterminate initial values.  On initialization of non local objects see 3.6.2 of [ISO C++ 1998].  On initialization of static objects see clause 4 of section 6.7 of [ISO C++ 1998].
</p>
<h3>Program Termination</h3>
<p>
<ul>
<li>By exit(): destructors for local objects are not called; destructors for constructed static objects are called.</li>
<li>By abort(): all destructors are not called.</li>
<li>By throwing an uncaught exception: all destructors are not called.</li>
<li>By returning from main(): all destructors are called.</li>
<li>See p.218 of [C++].</li>
</ul>
</p>
<h3>Operator Overloading</h3>
<p>
Overloaded operator functions must either be a member or take at least one
argument of a user-defined type.  See 11.2.3 of [C++].
</p>
<h3><code>std::endl</code> vs. <code>"\n"</code></h3>
<p><code>std::endl</code> causes the stdout stream to be flushed while <code>"\n"</code> does not.</p>
<h3>Pass overloaded function as an template parameter</h3>
<p>
Be wary when passing overloaded functions as template parameter.  Because the passed function is not given any argument the compiler does not know which version of the overloaded function to call.  So you must explicitly supply template parameters with the function.
</p>
<h2>Class</h2>
<p>
A friend function should either be explicitly declared in an enclosing scope or take an argument of its class.  If not, the friend cannot be called.  See p.280 of [C++].
</p>
<p>
A function member of a derived class is not in the same scope as a function member of the same name in a base class.  See section 13.2 of [ISO C++ 1998].  So the function of a derived class can not overload the function of the same name in the base class, because overloading can only happen among the same names in the same scope.
</p>
<p>
The scope of typedef types in class declaration begins from where it is defined to the end of class declaration, while the scope of class member variables and functions extend to the whole range of the class declaration.
</p>
<p>
If a function does not catch an exception destructors of local objects of that function will not be called.  (See section 9.4.1.1 of [C++].)
</p>
<p>
A function in derived class with more restricted access right can override the same function in the base class.  For example, a private function in a derived class can override the same public function in the base class.  Then I can access the private function in the derived class through virtual mechanism.  I think it is a loophole in the C++ grammar.  It is not allowed in Java.
</p>
<p>
Constructors can not be virtual but destructors can be virtual, and sometimes it must be.  Calling virtual functions in constructors and destructors have the same effect as calling non-virtual functions.  The usual virtual mechanism does not make effects, because the virtual pointer is pointing to the virtual function table of this class, not the class of the actual object.
</p>
<p>
Unlike Java, you cannot define static class within another class.
</p>
<p>
The class defined in another class is not special in C++.  The member functions of embedded classes can access all fields (regardless of access rights)  of the enclosing class.  The enclosing class has not any special access rights to the inner class.  It is not allowed to access the private or protected members of the inner class.
</p>
<p>
In the absence of an access-specifier for a base class, public is assumed when the derived class is declared <code>"struct"</code> and private is assumed when the class is declared <code>"class"</code>.
</p>
<pre>
class B { ... };
class D1 : B { ... }; 	// B private by default
struct D2 : B { ... };	// B public by default
</pre>
<p>
Static variables declared in a function member of a class, like static variable member, is shared by all objects of this class.
</p>
<h3>Assignment operator</h3>
<ul>
<li>Obliterate existing object;</li>
<li>Check for self-assignment;</li>
</ul>
<p>
Assign to all data members, including those from base classes (by calling assignment operators of base classes)
</p>
<h3>Constructor</h3>
<p>
The constructor of a class must specify a mem-initializer for all its virtual base classes (direct or indirect) and direct base classes if they do not have an accessible default constructor (clause 6 of 12.6.2 of [ISO C++ 1998]).
</p>
<h2>References</h2>
<ul>
<li>[C++] The C++ Programming Language, Third Edition.</li>
<li>[ISO C++ 1998] The C++ Standard, 1998.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2012-05-14 07:27:32</wp:post_date>
		<wp:post_date_gmt>2012-05-13 15:27:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-gotchas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1337098845]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[java-gotchas]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Java Gotchas</title>
		<link>http://spockwang.blogcn.com/articles/java-gotchas-2.html</link>
		<pubDate>Sun, 13 May 2012 15:29:35 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/articles/java-gotchas-2.html</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Primitive types, Operators, and Conversions</h2>
<p>
<code>==</code> tests object identity (whether the variable references the same object), not content identity (consider <code>equals()</code> instead).
</p>
<p>
Assignment semantics in Java: copy reference for object variables(cf clone), and copy value for basic types.
</p>
<p>
<code>>></code> do arithmetic right shift (shift in 0 for unsigned types and 1 for signed types), while <code>>>></code> do logical right shift (always shift in 0 regardless of sign).
</p>
<p>
Java command line args (<code>String[]</code> args in main) do not take into account the name of the program, i.e. "java prog arg1 arg2" has 2 arguments (arg1 and arg2), it does not count prog.
</code>
<p>
In Java all number types are signed except char.
</p>
<p>
No conversions between boolean and any other type are applied.
</p>
<p>
All narrower than int types are converted to int before doing arithmetic, so byte b = 0xFF; b >>> 1 may not be what you want.
</p>
<p>
Watch out for autobox and unbox, i.e. conversions between basic types and their wrapper types.  Sometimes it does not work.  For example, what does this print?
<pre>
public class box {
    public static void main(String[] args)  throws IOException  {
        cmp(new Integer(42), new Integer(42));
    }

    static void cmp(Integer first, Integer second)  {
        if (first < second)
            System.out.printf("%d < %d\n", first, second);
        else if (first == second)
            System.out.printf("%d == %d\n", first, second);
        else if (first > second)
            System.out.printf("%d > %d\n", first, second);
    }
}
</pre>
<h2>Class</h2>
<p>
You can not override the same method of base class with a weaker access privilege.  For example, you can not override a public method with a protected method.  This is different from C++.
</p>
<p>
Due to reference assignment semantics in Java, there is no built-in mechanisms to do copy (to get a duplicate object exactly the same as the original one).  There are two methods to achieve this: override the clone method publicly or provide a copy constructor (or a static factory).  See item 10 of "Effective Java".
</p>
<p>
An inner class (non-static class declared in another class, which is called its enclosing class) can access any member of its enclosing class.  And its enclosing class can also access any member of its inner class.
</p>
<p>
In Java a method of a class can overload with the method of its super class with the same name.  To the contrary in C++ this situation is not called overloading because the two methods are not declared in the same scope.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2012-05-13 23:29:35</wp:post_date>
		<wp:post_date_gmt>2012-05-13 15:29:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-gotchas-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1336923736]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GNU Tool Chain</title>
		<link>http://spockwang.blogcn.com/articles/gnu-tool-chain.html</link>
		<pubDate>Sun, 13 May 2012 16:00:14 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/articles/gnu-tool-chain.html</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Create Static Libraries</h2>
<ol>
<li>Compile source files<br />
<code>$ gcc -c file1.c file2.c ...</code></li>
<li>Create archives<br />
<code>$ ar r lib<sth>.a file1.o file2.o ...</code></li>
</ol>
<p>See ar(1).</p>
<h2>Link with Static Libraries</h2>
<code>$ gcc -static -o outputfile file1.c file2.c -L<search path> -l<archive name></code>
<p>
Use option -static to avoid linking against shared libraries.  Use option -l to specify which libraries are required and -L to specify where to find these libraries.  If the required libraries are in system paths (i.e. /lib and /usr/lib) -L is not required because the linker will search the system path by default.  The paths specified on command line are searched before system paths.  See ld(1). </p>
<h2>How Linkers Use Static Libraries to Resolve References</h2>
<p>
See Section 7.6.3 of Computer Systems: A Programmer's Perspective.
</p>
<p>
Watch out for mutual dependences and cyclic dependences of the static libraries.  See option --start-group of ld(1).
</p>
<h2>Create Shared Libraries</h2>
<code>$ gcc -shared -fpic -o lib&lt;st&gt;.so file1.c file2.c ... dependent_shared_libraries</code>
<p>
The dependent shared libraries will be stored in the .dynamic section (its type is "DT_NEED" and its value is whatever you put on the command line (absolute or relative path), you can check it using "readelf -d") of the generated shared object.  It tells the dynamic linker which libraries are needed by this shared object.
</p>
<h2>Link with shared libraries</h2>
<code>$ gcc -o outputfile file1.c file2.c ... -L&lt;search path&gt; -l&lt;library name&gt; ... -Wl,-rpath,&lt;path&gt; ...</code>
<p>
Like linking with static objects, when linking with shared objects the
linker needs to know which objects are required and where to find them.  It
uses the same mechanisms as linking with static objects to specify these
info.  See above "Link with Static Libraries".
</p>
<p>
If the shared objects on the command line require other shared objects (you can check this by see the entry type "DT_NEED" of .dynamic section), the linker editor needs to know where to find the required shared objects.  This info can be specified with the option <code>"-rpath-link"</code> or <code>"-rpath"</code> of ld or by other ways.  See ld(1) about options <code>"-rpath-link"</code> and <code>"-rpath"</code>.
</p>
<p>
For example:
<pre>
$ gcc main.c -L. -lfun -Wl,-rpath,pos
</pre>
where main.c depends libfun.so which depends on some shared objects resides in "pos".  Option "-Wl," is a way for gcc to pass options to ld.
</p>
<p>
There are other ways to specify the link-time shared objects search path other than the above ways and they are searched in the following order:
<ol>
<li>-rpath-link</li>
<li>-rpath</li>
<li>Environment variable LD_LIBRARY_PATH.</li>
<li>system paths /lib and /usr/lib.</li>
<li>the directories specified in /etc/ld.so.conf</li>
</ol>
</p>
<p>
This is incomplete.  See option <code>-rpath-link</code> of ld(1) for more details.
</p>
<h2>Runtime shared objects search path</h2>
<p>
When a executive which depends on some shared objects runs the dynamic linker needs to load those shared objects.  So it needs to know two things: which shared objects and where to find them.  
</p>
<p>
The required shared objects are stored in the DT_NEED entry (shown as "(NEEDED)" in output of "readelf -d", may not exist if it does not depend on anything) of .dynamic section in the object, which is specified on the command line when generating this object file.</p>
<p>
If the value of DT_NEED entry is a path (absolute or relative) the dynamic linker will try to find it there, and if it does not find it the executable can not run.  If it is just a file name the dynamic linker will search for it in a series of directories in the following order:
<ol>
<li>The directories (separated by colons) in the entry DT_RPATH of .dynamic section in the executable (these paths are specified by the option "-rpath" of ld or "-Wl,-rpath" of gcc);</li>
<li>The directories in the environment variable LD_LIBRARY_PATH (separated by colons);</li>
<li>the directories specified in /etc/ld.so.conf (actually /etc/ld.so.cache, so if you edit /etc/ld.so.conf you should run "ldconfig" to update the cache and the shared objects should be named like libxxx.so);</li>
<li>/lib</li>
<li>/usr/lib</li>
</ol>
</p>
<p>
You can see the searching process by setting the environment variable LD_DEBUG to "libs" when running the executable.  See ld.so(1).
</p>
<h2>Loading of dependent shared objects and symbol resolving</h2>
<p>
Often the executive depends on some shared objects, which depends on some other objects, which depends on some others, and so on.  So the depend relation is like a graph with the executive being the root.  The Linux dynamic linker is responsible for loading the dependent shared objects and loads them in breadth first search (BFS) order.  The dynamic liner has a global symbol table which includes all symbols it knows so far.  The global symbol table is used to resolve symbols in the executive when running.  It merges the symbol table of the shared object with global symbol table when loaded.  If the symbol table has some symbol with the same name as a symbol in the global symbol table, it will be ignored.  This will lead to global symbol interposition.  So if we want to avoid this problem we must make sure the global variables and functions in our programs have unique names. 
</p>
<p>
The phase of symbol resolving begins after all dependent shared objects are loaded and global symbol table is constructed.
</p>
<p>
The procedure of loading and symbol resolving can be checked using the env variable LD_DEBUG.  See ld.so(8).
</p>
<h2>References</h2>
<ol>
<li>ld(1) options -shared, -L, -l, -rpath, -rpath-link</li>
<li>ld.so(1)</li>
<li>gcc(1) options -shared, -static, and -Wl,</li>
<li>程序员的自我修养，Sections 7.6, 8.4 and 8.5</li>
<li>Computer System: A Programmer's Perspective, Chapter 7.</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2012-05-14 00:00:14</wp:post_date>
		<wp:post_date_gmt>2012-05-13 16:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnu-tool-chain</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1336924920]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MySql Help</title>
		<link>http://spockwang.blogcn.com/articles/mysql-help.html</link>
		<pubDate>Tue, 15 May 2012 16:21:24 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Administration]]></category>

		<category domain="category" nicename="administration"><![CDATA[Administration]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/articles/mysql-help.html</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Backup and Recovery</h2>
<p>
Use following command to backup an InnoDB table
<pre>
$ mysqldump -u&lt;username&gt; -p&lt;password&gt; --default-character-set=utf8 \
   --single-transaction db_name table_name > db_name-table_name-backup.sql
</pre>
</p>
<p>
If you want to backup the whole database you just omit the table name. And then use the following command to recover the table.
<pre>
$ mysql -u&lt;username&gt; -p&lt;password&gt; &lt; db_name-table_name-backup.sql
</pre>
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2012-05-16 00:21:24</wp:post_date>
		<wp:post_date_gmt>2012-05-15 16:21:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-help</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1337098952]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>C++ Coding Guideline</title>
		<link>http://spockwang.blogcn.com/articles/c-coding-guideline.html</link>
		<pubDate>Sun, 25 Nov 2012 11:07:55 +0000</pubDate>
		<dc:creator><![CDATA[spockwang]]></dc:creator>
		
		<category><![CDATA[Programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://spockwang.blogcn.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Declare the constructor and destructor in the header file and define them in the source file when using Pimpl idiom, even if they are empty.</h3>
Consider the following code.
<pre>
// pimpl.h
class Impl;    // forward declaration
class Pimpl {
public:
   Pimpl();
private:
    boost::scoped_ptr&lt;Impl&gt; m_impl;
};
</pre>
<pre>
// pimpl.cc
class Impl {
     // ...
};
<br />
Pimpl::Pimpl()
    : m_impl(new Impl)
{}
</pre>

If you do not declare the destructor the compiler will generate one in every translation unit that includes <code>"impl.h"</code>, which will call the destructor of member variables, that is, the destructor of <code>m_impl</code> which requires the complete definition of <code>Impl</code>. But the whole purpose of Pimpl idiom is to hide the definition of <code>Impl</code>. To solve this problem you should declare the destructor in the header file to prevent the compiler from generating one and define it in the source file. Then only the "impl.cc" requires the complete definition of <code>Impl</code>. Other translation units just call <code>Pimpl</code>'s destructor as an external function, so they don't  need to generate it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2012-11-25 19:07:55</wp:post_date>
		<wp:post_date_gmt>2012-11-25 11:07:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-coding-guideline</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1353842551]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
	</channel>
</rss>
